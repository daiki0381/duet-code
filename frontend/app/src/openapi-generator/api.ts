/* tslint:disable */
/* eslint-disable */
/**
 * Duet Code API
 * Duet Code API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Configuration } from './configuration'
import globalAxios, {
  AxiosPromise,
  AxiosInstance,
  AxiosRequestConfig,
} from 'axios'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from './common'
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from './base'

/**
 *
 * @export
 * @interface CreateNotification
 */
export interface CreateNotification {
  /**
   *
   * @type {number}
   * @memberof CreateNotification
   */
  post_id: number
  /**
   *
   * @type {string}
   * @memberof CreateNotification
   */
  action: string
  /**
   *
   * @type {boolean}
   * @memberof CreateNotification
   */
  checked: boolean
}
/**
 *
 * @export
 * @interface CreatePost
 */
export interface CreatePost {
  /**
   *
   * @type {string}
   * @memberof CreatePost
   */
  title: string
  /**
   *
   * @type {string}
   * @memberof CreatePost
   */
  pull_request_title: string
  /**
   *
   * @type {string}
   * @memberof CreatePost
   */
  pull_request_url: string
  /**
   *
   * @type {Array<string>}
   * @memberof CreatePost
   */
  languages: Array<string>
  /**
   *
   * @type {string}
   * @memberof CreatePost
   */
  pull_request_description: string
  /**
   *
   * @type {string}
   * @memberof CreatePost
   */
  review_point: string
}
/**
 *
 * @export
 * @interface LoginUser
 */
export interface LoginUser {
  /**
   *
   * @type {string}
   * @memberof LoginUser
   */
  uid: string
  /**
   *
   * @type {string}
   * @memberof LoginUser
   */
  github_access_token: string
  /**
   *
   * @type {string}
   * @memberof LoginUser
   */
  name: string
  /**
   *
   * @type {string}
   * @memberof LoginUser
   */
  avatar: string
}
/**
 *
 * @export
 * @interface Notification
 */
export interface Notification {
  /**
   *
   * @type {number}
   * @memberof Notification
   */
  id: number
  /**
   *
   * @type {number}
   * @memberof Notification
   */
  post_id: number
  /**
   *
   * @type {string}
   * @memberof Notification
   */
  action: string
  /**
   *
   * @type {boolean}
   * @memberof Notification
   */
  checked: boolean
  /**
   *
   * @type {string}
   * @memberof Notification
   */
  created_at: string
  /**
   *
   * @type {string}
   * @memberof Notification
   */
  updated_at: string
}
/**
 *
 * @export
 * @interface Post
 */
export interface Post {
  /**
   *
   * @type {number}
   * @memberof Post
   */
  id: number
  /**
   *
   * @type {number}
   * @memberof Post
   */
  reviewee: number
  /**
   *
   * @type {number}
   * @memberof Post
   */
  reviewer: number
  /**
   *
   * @type {string}
   * @memberof Post
   */
  title: string
  /**
   *
   * @type {string}
   * @memberof Post
   */
  pull_request_title: string
  /**
   *
   * @type {string}
   * @memberof Post
   */
  pull_request_url: string
  /**
   *
   * @type {Array<string>}
   * @memberof Post
   */
  languages: Array<string>
  /**
   *
   * @type {string}
   * @memberof Post
   */
  pull_request_description: string
  /**
   *
   * @type {string}
   * @memberof Post
   */
  review_point: string
  /**
   *
   * @type {string}
   * @memberof Post
   */
  feedback: string
  /**
   *
   * @type {string}
   * @memberof Post
   */
  thanks: string
  /**
   *
   * @type {boolean}
   * @memberof Post
   */
  done: boolean
  /**
   *
   * @type {string}
   * @memberof Post
   */
  created_at: string
  /**
   *
   * @type {string}
   * @memberof Post
   */
  updated_at: string
}
/**
 *
 * @export
 * @interface UpdateNotification
 */
export interface UpdateNotification {
  /**
   *
   * @type {boolean}
   * @memberof UpdateNotification
   */
  checked: boolean
}
/**
 *
 * @export
 * @interface UpdatePost
 */
export interface UpdatePost {
  /**
   *
   * @type {string}
   * @memberof UpdatePost
   */
  title?: string
  /**
   *
   * @type {string}
   * @memberof UpdatePost
   */
  pull_request_title?: string
  /**
   *
   * @type {string}
   * @memberof UpdatePost
   */
  pull_request_url?: string
  /**
   *
   * @type {Array<string>}
   * @memberof UpdatePost
   */
  languages?: Array<string>
  /**
   *
   * @type {string}
   * @memberof UpdatePost
   */
  pull_request_description?: string
  /**
   *
   * @type {string}
   * @memberof UpdatePost
   */
  review_point?: string
  /**
   *
   * @type {string}
   * @memberof UpdatePost
   */
  feedback?: string
  /**
   *
   * @type {string}
   * @memberof UpdatePost
   */
  thanks?: string
  /**
   *
   * @type {boolean}
   * @memberof UpdatePost
   */
  done?: boolean
}
/**
 *
 * @export
 * @interface User
 */
export interface User {
  /**
   *
   * @type {number}
   * @memberof User
   */
  id: number
  /**
   *
   * @type {string}
   * @memberof User
   */
  uid: string
  /**
   *
   * @type {string}
   * @memberof User
   */
  github_access_token: string
  /**
   *
   * @type {string}
   * @memberof User
   */
  name: string
  /**
   *
   * @type {string}
   * @memberof User
   */
  avatar: string
  /**
   *
   * @type {string}
   * @memberof User
   */
  created_at: string
  /**
   *
   * @type {string}
   * @memberof User
   */
  updated_at: string
}

/**
 * NotificationApi - axios parameter creator
 * @export
 */
export const NotificationApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @summary Create notification
     * @param {CreateNotification} [createNotification]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createNotification: async (
      createNotification?: CreateNotification,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/notifications`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        createNotification,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Get notifications
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getNotifications: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/notifications`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Update notification
     * @param {number} notificationId
     * @param {UpdateNotification} [updateNotification]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateNotification: async (
      notificationId: number,
      updateNotification?: UpdateNotification,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'notificationId' is not null or undefined
      assertParamExists('updateNotification', 'notificationId', notificationId)
      const localVarPath = `/api/v1/notifications/{notification_id}`.replace(
        `{${'notification_id'}}`,
        encodeURIComponent(String(notificationId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'PATCH',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateNotification,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * NotificationApi - functional programming interface
 * @export
 */
export const NotificationApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    NotificationApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary Create notification
     * @param {CreateNotification} [createNotification]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createNotification(
      createNotification?: CreateNotification,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.createNotification(
          createNotification,
          options,
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     *
     * @summary Get notifications
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getNotifications(
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<Notification>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getNotifications(options)
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     *
     * @summary Update notification
     * @param {number} notificationId
     * @param {UpdateNotification} [updateNotification]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateNotification(
      notificationId: number,
      updateNotification?: UpdateNotification,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.updateNotification(
          notificationId,
          updateNotification,
          options,
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
  }
}

/**
 * NotificationApi - factory interface
 * @export
 */
export const NotificationApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = NotificationApiFp(configuration)
  return {
    /**
     *
     * @summary Create notification
     * @param {CreateNotification} [createNotification]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createNotification(
      createNotification?: CreateNotification,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .createNotification(createNotification, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Get notifications
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getNotifications(options?: any): AxiosPromise<Array<Notification>> {
      return localVarFp
        .getNotifications(options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Update notification
     * @param {number} notificationId
     * @param {UpdateNotification} [updateNotification]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateNotification(
      notificationId: number,
      updateNotification?: UpdateNotification,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .updateNotification(notificationId, updateNotification, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * NotificationApi - object-oriented interface
 * @export
 * @class NotificationApi
 * @extends {BaseAPI}
 */
export class NotificationApi extends BaseAPI {
  /**
   *
   * @summary Create notification
   * @param {CreateNotification} [createNotification]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof NotificationApi
   */
  public createNotification(
    createNotification?: CreateNotification,
    options?: AxiosRequestConfig,
  ) {
    return NotificationApiFp(this.configuration)
      .createNotification(createNotification, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Get notifications
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof NotificationApi
   */
  public getNotifications(options?: AxiosRequestConfig) {
    return NotificationApiFp(this.configuration)
      .getNotifications(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Update notification
   * @param {number} notificationId
   * @param {UpdateNotification} [updateNotification]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof NotificationApi
   */
  public updateNotification(
    notificationId: number,
    updateNotification?: UpdateNotification,
    options?: AxiosRequestConfig,
  ) {
    return NotificationApiFp(this.configuration)
      .updateNotification(notificationId, updateNotification, options)
      .then((request) => request(this.axios, this.basePath))
  }
}

/**
 * PostApi - axios parameter creator
 * @export
 */
export const PostApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @summary Create post
     * @param {CreatePost} [createPost]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPost: async (
      createPost?: CreatePost,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/posts`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication JWT required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        createPost,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Delete post
     * @param {number} postId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePost: async (
      postId: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'postId' is not null or undefined
      assertParamExists('deletePost', 'postId', postId)
      const localVarPath = `/api/v1/posts/{post_id}`.replace(
        `{${'post_id'}}`,
        encodeURIComponent(String(postId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Get posts
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPosts: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/posts`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Update post
     * @param {number} postId
     * @param {UpdatePost} [updatePost]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePost: async (
      postId: number,
      updatePost?: UpdatePost,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'postId' is not null or undefined
      assertParamExists('updatePost', 'postId', postId)
      const localVarPath = `/api/v1/posts/{post_id}`.replace(
        `{${'post_id'}}`,
        encodeURIComponent(String(postId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'PATCH',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        updatePost,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * PostApi - functional programming interface
 * @export
 */
export const PostApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = PostApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary Create post
     * @param {CreatePost} [createPost]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createPost(
      createPost?: CreatePost,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createPost(
        createPost,
        options,
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     *
     * @summary Delete post
     * @param {number} postId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deletePost(
      postId: number,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deletePost(
        postId,
        options,
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     *
     * @summary Get posts
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getPosts(
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Post>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getPosts(
        options,
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     *
     * @summary Update post
     * @param {number} postId
     * @param {UpdatePost} [updatePost]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updatePost(
      postId: number,
      updatePost?: UpdatePost,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updatePost(
        postId,
        updatePost,
        options,
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
  }
}

/**
 * PostApi - factory interface
 * @export
 */
export const PostApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = PostApiFp(configuration)
  return {
    /**
     *
     * @summary Create post
     * @param {CreatePost} [createPost]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPost(createPost?: CreatePost, options?: any): AxiosPromise<void> {
      return localVarFp
        .createPost(createPost, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Delete post
     * @param {number} postId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePost(postId: number, options?: any): AxiosPromise<void> {
      return localVarFp
        .deletePost(postId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Get posts
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPosts(options?: any): AxiosPromise<Array<Post>> {
      return localVarFp
        .getPosts(options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Update post
     * @param {number} postId
     * @param {UpdatePost} [updatePost]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePost(
      postId: number,
      updatePost?: UpdatePost,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .updatePost(postId, updatePost, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * PostApi - object-oriented interface
 * @export
 * @class PostApi
 * @extends {BaseAPI}
 */
export class PostApi extends BaseAPI {
  /**
   *
   * @summary Create post
   * @param {CreatePost} [createPost]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PostApi
   */
  public createPost(createPost?: CreatePost, options?: AxiosRequestConfig) {
    return PostApiFp(this.configuration)
      .createPost(createPost, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Delete post
   * @param {number} postId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PostApi
   */
  public deletePost(postId: number, options?: AxiosRequestConfig) {
    return PostApiFp(this.configuration)
      .deletePost(postId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Get posts
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PostApi
   */
  public getPosts(options?: AxiosRequestConfig) {
    return PostApiFp(this.configuration)
      .getPosts(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Update post
   * @param {number} postId
   * @param {UpdatePost} [updatePost]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PostApi
   */
  public updatePost(
    postId: number,
    updatePost?: UpdatePost,
    options?: AxiosRequestConfig,
  ) {
    return PostApiFp(this.configuration)
      .updatePost(postId, updatePost, options)
      .then((request) => request(this.axios, this.basePath))
  }
}

/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @summary Get current user id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCurrentUserId: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/current_user/id`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication JWT required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Get user
     * @param {number} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUser: async (
      userId: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'userId' is not null or undefined
      assertParamExists('getUser', 'userId', userId)
      const localVarPath = `/api/v1/users/{user_id}`.replace(
        `{${'user_id'}}`,
        encodeURIComponent(String(userId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Login user
     * @param {LoginUser} [loginUser]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    loginUser: async (
      loginUser?: LoginUser,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/users`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication JWT required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        loginUser,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary Get current user id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getCurrentUserId(
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getCurrentUserId(options)
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     *
     * @summary Get user
     * @param {number} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getUser(
      userId: number,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getUser(
        userId,
        options,
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     *
     * @summary Login user
     * @param {LoginUser} [loginUser]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async loginUser(
      loginUser?: LoginUser,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.loginUser(
        loginUser,
        options,
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
  }
}

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = UserApiFp(configuration)
  return {
    /**
     *
     * @summary Get current user id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCurrentUserId(options?: any): AxiosPromise<number> {
      return localVarFp
        .getCurrentUserId(options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Get user
     * @param {number} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUser(userId: number, options?: any): AxiosPromise<User> {
      return localVarFp
        .getUser(userId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Login user
     * @param {LoginUser} [loginUser]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    loginUser(loginUser?: LoginUser, options?: any): AxiosPromise<void> {
      return localVarFp
        .loginUser(loginUser, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
  /**
   *
   * @summary Get current user id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public getCurrentUserId(options?: AxiosRequestConfig) {
    return UserApiFp(this.configuration)
      .getCurrentUserId(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Get user
   * @param {number} userId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public getUser(userId: number, options?: AxiosRequestConfig) {
    return UserApiFp(this.configuration)
      .getUser(userId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Login user
   * @param {LoginUser} [loginUser]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public loginUser(loginUser?: LoginUser, options?: AxiosRequestConfig) {
    return UserApiFp(this.configuration)
      .loginUser(loginUser, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
