/* tslint:disable */
/* eslint-disable */
/**
 * Duet Code API
 * Duet Code API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Configuration } from './configuration'
import globalAxios, {
  AxiosPromise,
  AxiosInstance,
  AxiosRequestConfig,
} from 'axios'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from './common'
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from './base'

/**
 *
 * @export
 * @interface CreateNotification
 */
export interface CreateNotification {
  /**
   *
   * @type {string}
   * @memberof CreateNotification
   */
  action: string
}
/**
 *
 * @export
 * @interface CreateOrUpdateReview
 */
export interface CreateOrUpdateReview {
  /**
   *
   * @type {string}
   * @memberof CreateOrUpdateReview
   */
  title: string
  /**
   *
   * @type {string}
   * @memberof CreateOrUpdateReview
   */
  repository: string
  /**
   *
   * @type {string}
   * @memberof CreateOrUpdateReview
   */
  pull_request_title: string
  /**
   *
   * @type {string}
   * @memberof CreateOrUpdateReview
   */
  pull_request_url: string
  /**
   *
   * @type {Array<string>}
   * @memberof CreateOrUpdateReview
   */
  languages: Array<string>
  /**
   *
   * @type {string}
   * @memberof CreateOrUpdateReview
   */
  pull_request_description: string
  /**
   *
   * @type {string}
   * @memberof CreateOrUpdateReview
   */
  review_point: string
}
/**
 *
 * @export
 * @interface LoginUser
 */
export interface LoginUser {
  /**
   *
   * @type {string}
   * @memberof LoginUser
   */
  uid: string
  /**
   *
   * @type {string}
   * @memberof LoginUser
   */
  github_access_token: string
  /**
   *
   * @type {string}
   * @memberof LoginUser
   */
  name: string
  /**
   *
   * @type {string}
   * @memberof LoginUser
   */
  avatar: string
}
/**
 *
 * @export
 * @interface Notification
 */
export interface Notification {
  /**
   *
   * @type {number}
   * @memberof Notification
   */
  id?: number
  /**
   *
   * @type {number}
   * @memberof Notification
   */
  review_id?: number
  /**
   *
   * @type {number}
   * @memberof Notification
   */
  reviewee_id?: number
  /**
   *
   * @type {number}
   * @memberof Notification
   */
  reviewer_id?: number
  /**
   *
   * @type {string}
   * @memberof Notification
   */
  action?: string
  /**
   *
   * @type {boolean}
   * @memberof Notification
   */
  checked?: boolean
  /**
   *
   * @type {string}
   * @memberof Notification
   */
  created_at?: string
  /**
   *
   * @type {string}
   * @memberof Notification
   */
  updated_at?: string
}
/**
 *
 * @export
 * @interface Pull
 */
export interface Pull {
  /**
   *
   * @type {string}
   * @memberof Pull
   */
  title?: string
  /**
   *
   * @type {string}
   * @memberof Pull
   */
  url?: string
}
/**
 *
 * @export
 * @interface Review
 */
export interface Review {
  /**
   *
   * @type {number}
   * @memberof Review
   */
  id?: number
  /**
   *
   * @type {number}
   * @memberof Review
   */
  reviewee_id?: number
  /**
   *
   * @type {number}
   * @memberof Review
   */
  reviewer_id?: number
  /**
   *
   * @type {string}
   * @memberof Review
   */
  title?: string
  /**
   *
   * @type {string}
   * @memberof Review
   */
  repository?: string
  /**
   *
   * @type {string}
   * @memberof Review
   */
  pull_request_title?: string
  /**
   *
   * @type {string}
   * @memberof Review
   */
  pull_request_url?: string
  /**
   *
   * @type {Array<string>}
   * @memberof Review
   */
  languages?: Array<string>
  /**
   *
   * @type {string}
   * @memberof Review
   */
  pull_request_description?: string
  /**
   *
   * @type {string}
   * @memberof Review
   */
  review_point?: string
  /**
   *
   * @type {string}
   * @memberof Review
   */
  feedback?: string
  /**
   *
   * @type {string}
   * @memberof Review
   */
  thanks?: string
  /**
   *
   * @type {string}
   * @memberof Review
   */
  accepted_at?: string
  /**
   *
   * @type {string}
   * @memberof Review
   */
  created_at?: string
  /**
   *
   * @type {string}
   * @memberof Review
   */
  updated_at?: string
}
/**
 *
 * @export
 * @interface UpdateNotification
 */
export interface UpdateNotification {
  /**
   *
   * @type {boolean}
   * @memberof UpdateNotification
   */
  checked: boolean
}
/**
 *
 * @export
 * @interface UpdateReviewAccepted
 */
export interface UpdateReviewAccepted {
  /**
   *
   * @type {string}
   * @memberof UpdateReviewAccepted
   */
  accepted_at: string
}
/**
 *
 * @export
 * @interface UpdateReviewFeedback
 */
export interface UpdateReviewFeedback {
  /**
   *
   * @type {string}
   * @memberof UpdateReviewFeedback
   */
  feedback: string
}
/**
 *
 * @export
 * @interface UpdateReviewThanks
 */
export interface UpdateReviewThanks {
  /**
   *
   * @type {string}
   * @memberof UpdateReviewThanks
   */
  thanks: string
}
/**
 *
 * @export
 * @interface User
 */
export interface User {
  /**
   *
   * @type {number}
   * @memberof User
   */
  id?: number
  /**
   *
   * @type {string}
   * @memberof User
   */
  name?: string
  /**
   *
   * @type {string}
   * @memberof User
   */
  avatar?: string
  /**
   *
   * @type {string}
   * @memberof User
   */
  created_at?: string
  /**
   *
   * @type {string}
   * @memberof User
   */
  updated_at?: string
}

/**
 * GitHubApi - axios parameter creator
 * @export
 */
export const GitHubApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @summary Get current user pulls
     * @param {string} repo
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCurrentUserPulls: async (
      repo: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'repo' is not null or undefined
      assertParamExists('getCurrentUserPulls', 'repo', repo)
      const localVarPath = `/api/v1/current_user/pulls`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication JWT required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      if (repo !== undefined) {
        localVarQueryParameter['repo'] = repo
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Get current user repos
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCurrentUserRepos: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/current_user/repos`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication JWT required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Request reviewer
     * @param {number} reviewId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    requestReviewer: async (
      reviewId: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'reviewId' is not null or undefined
      assertParamExists('requestReviewer', 'reviewId', reviewId)
      const localVarPath =
        `/api/v1/reviews/{review_id}/requested_reviewers`.replace(
          `{${'review_id'}}`,
          encodeURIComponent(String(reviewId)),
        )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * GitHubApi - functional programming interface
 * @export
 */
export const GitHubApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = GitHubApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary Get current user pulls
     * @param {string} repo
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getCurrentUserPulls(
      repo: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Pull>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getCurrentUserPulls(repo, options)
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     *
     * @summary Get current user repos
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getCurrentUserRepos(
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getCurrentUserRepos(options)
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     *
     * @summary Request reviewer
     * @param {number} reviewId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async requestReviewer(
      reviewId: number,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.requestReviewer(
        reviewId,
        options,
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
  }
}

/**
 * GitHubApi - factory interface
 * @export
 */
export const GitHubApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = GitHubApiFp(configuration)
  return {
    /**
     *
     * @summary Get current user pulls
     * @param {string} repo
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCurrentUserPulls(
      repo: string,
      options?: any,
    ): AxiosPromise<Array<Pull>> {
      return localVarFp
        .getCurrentUserPulls(repo, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Get current user repos
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCurrentUserRepos(options?: any): AxiosPromise<Array<string>> {
      return localVarFp
        .getCurrentUserRepos(options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Request reviewer
     * @param {number} reviewId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    requestReviewer(reviewId: number, options?: any): AxiosPromise<void> {
      return localVarFp
        .requestReviewer(reviewId, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * GitHubApi - object-oriented interface
 * @export
 * @class GitHubApi
 * @extends {BaseAPI}
 */
export class GitHubApi extends BaseAPI {
  /**
   *
   * @summary Get current user pulls
   * @param {string} repo
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GitHubApi
   */
  public getCurrentUserPulls(repo: string, options?: AxiosRequestConfig) {
    return GitHubApiFp(this.configuration)
      .getCurrentUserPulls(repo, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Get current user repos
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GitHubApi
   */
  public getCurrentUserRepos(options?: AxiosRequestConfig) {
    return GitHubApiFp(this.configuration)
      .getCurrentUserRepos(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Request reviewer
   * @param {number} reviewId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GitHubApi
   */
  public requestReviewer(reviewId: number, options?: AxiosRequestConfig) {
    return GitHubApiFp(this.configuration)
      .requestReviewer(reviewId, options)
      .then((request) => request(this.axios, this.basePath))
  }
}

/**
 * NotificationApi - axios parameter creator
 * @export
 */
export const NotificationApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @summary Create notification
     * @param {number} reviewId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createNotification: async (
      reviewId: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'reviewId' is not null or undefined
      assertParamExists('createNotification', 'reviewId', reviewId)
      const localVarPath = `/api/v1/reviews/{review_id}/notification`.replace(
        `{${'review_id'}}`,
        encodeURIComponent(String(reviewId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Get notifications
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getNotifications: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/notifications`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Update notification
     * @param {number} notificationId
     * @param {UpdateNotification} [updateNotification]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateNotification: async (
      notificationId: number,
      updateNotification?: UpdateNotification,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'notificationId' is not null or undefined
      assertParamExists('updateNotification', 'notificationId', notificationId)
      const localVarPath = `/api/v1/notifications/{notification_id}`.replace(
        `{${'notification_id'}}`,
        encodeURIComponent(String(notificationId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'PATCH',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateNotification,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * NotificationApi - functional programming interface
 * @export
 */
export const NotificationApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    NotificationApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary Create notification
     * @param {number} reviewId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createNotification(
      reviewId: number,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.createNotification(reviewId, options)
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     *
     * @summary Get notifications
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getNotifications(
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<Notification>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getNotifications(options)
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     *
     * @summary Update notification
     * @param {number} notificationId
     * @param {UpdateNotification} [updateNotification]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateNotification(
      notificationId: number,
      updateNotification?: UpdateNotification,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.updateNotification(
          notificationId,
          updateNotification,
          options,
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
  }
}

/**
 * NotificationApi - factory interface
 * @export
 */
export const NotificationApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = NotificationApiFp(configuration)
  return {
    /**
     *
     * @summary Create notification
     * @param {number} reviewId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createNotification(reviewId: number, options?: any): AxiosPromise<object> {
      return localVarFp
        .createNotification(reviewId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Get notifications
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getNotifications(options?: any): AxiosPromise<Array<Notification>> {
      return localVarFp
        .getNotifications(options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Update notification
     * @param {number} notificationId
     * @param {UpdateNotification} [updateNotification]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateNotification(
      notificationId: number,
      updateNotification?: UpdateNotification,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .updateNotification(notificationId, updateNotification, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * NotificationApi - object-oriented interface
 * @export
 * @class NotificationApi
 * @extends {BaseAPI}
 */
export class NotificationApi extends BaseAPI {
  /**
   *
   * @summary Create notification
   * @param {number} reviewId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof NotificationApi
   */
  public createNotification(reviewId: number, options?: AxiosRequestConfig) {
    return NotificationApiFp(this.configuration)
      .createNotification(reviewId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Get notifications
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof NotificationApi
   */
  public getNotifications(options?: AxiosRequestConfig) {
    return NotificationApiFp(this.configuration)
      .getNotifications(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Update notification
   * @param {number} notificationId
   * @param {UpdateNotification} [updateNotification]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof NotificationApi
   */
  public updateNotification(
    notificationId: number,
    updateNotification?: UpdateNotification,
    options?: AxiosRequestConfig,
  ) {
    return NotificationApiFp(this.configuration)
      .updateNotification(notificationId, updateNotification, options)
      .then((request) => request(this.axios, this.basePath))
  }
}

/**
 * ReviewApi - axios parameter creator
 * @export
 */
export const ReviewApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @summary Create review
     * @param {CreateOrUpdateReview} [createOrUpdateReview]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createReview: async (
      createOrUpdateReview?: CreateOrUpdateReview,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/reviews`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication JWT required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        createOrUpdateReview,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Delete review
     * @param {number} reviewId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteReview: async (
      reviewId: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'reviewId' is not null or undefined
      assertParamExists('deleteReview', 'reviewId', reviewId)
      const localVarPath = `/api/v1/reviews/{review_id}`.replace(
        `{${'review_id'}}`,
        encodeURIComponent(String(reviewId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Get review
     * @param {number} reviewId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getReview: async (
      reviewId: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'reviewId' is not null or undefined
      assertParamExists('getReview', 'reviewId', reviewId)
      const localVarPath = `/api/v1/reviews/{review_id}`.replace(
        `{${'review_id'}}`,
        encodeURIComponent(String(reviewId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Get reviews
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getReviews: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/reviews`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Update review
     * @param {number} reviewId
     * @param {CreateOrUpdateReview} [createOrUpdateReview]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateReview: async (
      reviewId: number,
      createOrUpdateReview?: CreateOrUpdateReview,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'reviewId' is not null or undefined
      assertParamExists('updateReview', 'reviewId', reviewId)
      const localVarPath = `/api/v1/reviews/{review_id}`.replace(
        `{${'review_id'}}`,
        encodeURIComponent(String(reviewId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'PATCH',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        createOrUpdateReview,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Update review accepted
     * @param {number} reviewId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateReviewAccepted: async (
      reviewId: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'reviewId' is not null or undefined
      assertParamExists('updateReviewAccepted', 'reviewId', reviewId)
      const localVarPath = `/api/v1/reviews/{review_id}/accepted`.replace(
        `{${'review_id'}}`,
        encodeURIComponent(String(reviewId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication JWT required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Update review feedback
     * @param {number} reviewId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateReviewFeedback: async (
      reviewId: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'reviewId' is not null or undefined
      assertParamExists('updateReviewFeedback', 'reviewId', reviewId)
      const localVarPath = `/api/v1/reviews/{review_id}/feedback`.replace(
        `{${'review_id'}}`,
        encodeURIComponent(String(reviewId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Update review thanks
     * @param {number} reviewId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateReviewThanks: async (
      reviewId: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'reviewId' is not null or undefined
      assertParamExists('updateReviewThanks', 'reviewId', reviewId)
      const localVarPath = `/api/v1/reviews/{review_id}/thanks`.replace(
        `{${'review_id'}}`,
        encodeURIComponent(String(reviewId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * ReviewApi - functional programming interface
 * @export
 */
export const ReviewApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = ReviewApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary Create review
     * @param {CreateOrUpdateReview} [createOrUpdateReview]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createReview(
      createOrUpdateReview?: CreateOrUpdateReview,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createReview(
        createOrUpdateReview,
        options,
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     *
     * @summary Delete review
     * @param {number} reviewId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteReview(
      reviewId: number,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteReview(
        reviewId,
        options,
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     *
     * @summary Get review
     * @param {number} reviewId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getReview(
      reviewId: number,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Review>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getReview(
        reviewId,
        options,
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     *
     * @summary Get reviews
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getReviews(
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Review>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getReviews(
        options,
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     *
     * @summary Update review
     * @param {number} reviewId
     * @param {CreateOrUpdateReview} [createOrUpdateReview]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateReview(
      reviewId: number,
      createOrUpdateReview?: CreateOrUpdateReview,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateReview(
        reviewId,
        createOrUpdateReview,
        options,
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     *
     * @summary Update review accepted
     * @param {number} reviewId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateReviewAccepted(
      reviewId: number,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<UpdateReviewAccepted>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.updateReviewAccepted(reviewId, options)
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     *
     * @summary Update review feedback
     * @param {number} reviewId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateReviewFeedback(
      reviewId: number,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<UpdateReviewFeedback>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.updateReviewFeedback(reviewId, options)
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     *
     * @summary Update review thanks
     * @param {number} reviewId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateReviewThanks(
      reviewId: number,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<UpdateReviewThanks>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.updateReviewThanks(reviewId, options)
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
  }
}

/**
 * ReviewApi - factory interface
 * @export
 */
export const ReviewApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = ReviewApiFp(configuration)
  return {
    /**
     *
     * @summary Create review
     * @param {CreateOrUpdateReview} [createOrUpdateReview]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createReview(
      createOrUpdateReview?: CreateOrUpdateReview,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .createReview(createOrUpdateReview, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Delete review
     * @param {number} reviewId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteReview(reviewId: number, options?: any): AxiosPromise<void> {
      return localVarFp
        .deleteReview(reviewId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Get review
     * @param {number} reviewId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getReview(reviewId: number, options?: any): AxiosPromise<Review> {
      return localVarFp
        .getReview(reviewId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Get reviews
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getReviews(options?: any): AxiosPromise<Array<Review>> {
      return localVarFp
        .getReviews(options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Update review
     * @param {number} reviewId
     * @param {CreateOrUpdateReview} [createOrUpdateReview]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateReview(
      reviewId: number,
      createOrUpdateReview?: CreateOrUpdateReview,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .updateReview(reviewId, createOrUpdateReview, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Update review accepted
     * @param {number} reviewId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateReviewAccepted(
      reviewId: number,
      options?: any,
    ): AxiosPromise<UpdateReviewAccepted> {
      return localVarFp
        .updateReviewAccepted(reviewId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Update review feedback
     * @param {number} reviewId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateReviewFeedback(
      reviewId: number,
      options?: any,
    ): AxiosPromise<UpdateReviewFeedback> {
      return localVarFp
        .updateReviewFeedback(reviewId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Update review thanks
     * @param {number} reviewId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateReviewThanks(
      reviewId: number,
      options?: any,
    ): AxiosPromise<UpdateReviewThanks> {
      return localVarFp
        .updateReviewThanks(reviewId, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * ReviewApi - object-oriented interface
 * @export
 * @class ReviewApi
 * @extends {BaseAPI}
 */
export class ReviewApi extends BaseAPI {
  /**
   *
   * @summary Create review
   * @param {CreateOrUpdateReview} [createOrUpdateReview]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ReviewApi
   */
  public createReview(
    createOrUpdateReview?: CreateOrUpdateReview,
    options?: AxiosRequestConfig,
  ) {
    return ReviewApiFp(this.configuration)
      .createReview(createOrUpdateReview, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Delete review
   * @param {number} reviewId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ReviewApi
   */
  public deleteReview(reviewId: number, options?: AxiosRequestConfig) {
    return ReviewApiFp(this.configuration)
      .deleteReview(reviewId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Get review
   * @param {number} reviewId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ReviewApi
   */
  public getReview(reviewId: number, options?: AxiosRequestConfig) {
    return ReviewApiFp(this.configuration)
      .getReview(reviewId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Get reviews
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ReviewApi
   */
  public getReviews(options?: AxiosRequestConfig) {
    return ReviewApiFp(this.configuration)
      .getReviews(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Update review
   * @param {number} reviewId
   * @param {CreateOrUpdateReview} [createOrUpdateReview]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ReviewApi
   */
  public updateReview(
    reviewId: number,
    createOrUpdateReview?: CreateOrUpdateReview,
    options?: AxiosRequestConfig,
  ) {
    return ReviewApiFp(this.configuration)
      .updateReview(reviewId, createOrUpdateReview, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Update review accepted
   * @param {number} reviewId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ReviewApi
   */
  public updateReviewAccepted(reviewId: number, options?: AxiosRequestConfig) {
    return ReviewApiFp(this.configuration)
      .updateReviewAccepted(reviewId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Update review feedback
   * @param {number} reviewId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ReviewApi
   */
  public updateReviewFeedback(reviewId: number, options?: AxiosRequestConfig) {
    return ReviewApiFp(this.configuration)
      .updateReviewFeedback(reviewId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Update review thanks
   * @param {number} reviewId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ReviewApi
   */
  public updateReviewThanks(reviewId: number, options?: AxiosRequestConfig) {
    return ReviewApiFp(this.configuration)
      .updateReviewThanks(reviewId, options)
      .then((request) => request(this.axios, this.basePath))
  }
}

/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @summary Get current user id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCurrentUserId: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/current_user/id`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication JWT required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Get user
     * @param {number} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUser: async (
      userId: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'userId' is not null or undefined
      assertParamExists('getUser', 'userId', userId)
      const localVarPath = `/api/v1/users/{user_id}`.replace(
        `{${'user_id'}}`,
        encodeURIComponent(String(userId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Get user accepted reviews
     * @param {number} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserAcceptedReviews: async (
      userId: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'userId' is not null or undefined
      assertParamExists('getUserAcceptedReviews', 'userId', userId)
      const localVarPath = `/api/v1/users/{user_id}/accepted_reviews`.replace(
        `{${'user_id'}}`,
        encodeURIComponent(String(userId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Get user wanted reviews
     * @param {number} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserWantedReviews: async (
      userId: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'userId' is not null or undefined
      assertParamExists('getUserWantedReviews', 'userId', userId)
      const localVarPath = `/api/v1/users/{user_id}/wanted_reviews`.replace(
        `{${'user_id'}}`,
        encodeURIComponent(String(userId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Login user
     * @param {LoginUser} [loginUser]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    loginUser: async (
      loginUser?: LoginUser,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/users`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication JWT required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        loginUser,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary Get current user id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getCurrentUserId(
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getCurrentUserId(options)
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     *
     * @summary Get user
     * @param {number} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getUser(
      userId: number,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getUser(
        userId,
        options,
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     *
     * @summary Get user accepted reviews
     * @param {number} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getUserAcceptedReviews(
      userId: number,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Review>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getUserAcceptedReviews(userId, options)
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     *
     * @summary Get user wanted reviews
     * @param {number} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getUserWantedReviews(
      userId: number,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Review>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getUserWantedReviews(userId, options)
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     *
     * @summary Login user
     * @param {LoginUser} [loginUser]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async loginUser(
      loginUser?: LoginUser,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.loginUser(
        loginUser,
        options,
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
  }
}

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = UserApiFp(configuration)
  return {
    /**
     *
     * @summary Get current user id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCurrentUserId(options?: any): AxiosPromise<number> {
      return localVarFp
        .getCurrentUserId(options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Get user
     * @param {number} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUser(userId: number, options?: any): AxiosPromise<User> {
      return localVarFp
        .getUser(userId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Get user accepted reviews
     * @param {number} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserAcceptedReviews(
      userId: number,
      options?: any,
    ): AxiosPromise<Array<Review>> {
      return localVarFp
        .getUserAcceptedReviews(userId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Get user wanted reviews
     * @param {number} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserWantedReviews(
      userId: number,
      options?: any,
    ): AxiosPromise<Array<Review>> {
      return localVarFp
        .getUserWantedReviews(userId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Login user
     * @param {LoginUser} [loginUser]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    loginUser(loginUser?: LoginUser, options?: any): AxiosPromise<void> {
      return localVarFp
        .loginUser(loginUser, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
  /**
   *
   * @summary Get current user id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public getCurrentUserId(options?: AxiosRequestConfig) {
    return UserApiFp(this.configuration)
      .getCurrentUserId(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Get user
   * @param {number} userId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public getUser(userId: number, options?: AxiosRequestConfig) {
    return UserApiFp(this.configuration)
      .getUser(userId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Get user accepted reviews
   * @param {number} userId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public getUserAcceptedReviews(userId: number, options?: AxiosRequestConfig) {
    return UserApiFp(this.configuration)
      .getUserAcceptedReviews(userId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Get user wanted reviews
   * @param {number} userId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public getUserWantedReviews(userId: number, options?: AxiosRequestConfig) {
    return UserApiFp(this.configuration)
      .getUserWantedReviews(userId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Login user
   * @param {LoginUser} [loginUser]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public loginUser(loginUser?: LoginUser, options?: AxiosRequestConfig) {
    return UserApiFp(this.configuration)
      .loginUser(loginUser, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
