/* tslint:disable */
/* eslint-disable */
/**
 * Duet Code
 * Duet Code API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Configuration } from './configuration'
import globalAxios, {
  AxiosPromise,
  AxiosInstance,
  AxiosRequestConfig,
} from 'axios'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from './common'
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from './base'

/**
 *
 * @export
 * @interface AddCollaboratorRequest
 */
export interface AddCollaboratorRequest {
  /**
   * The permission to grant the collaborator. **Only valid on organization-owned repositories.** We accept the following permissions to be set: `pull`, `triage`, `push`, `maintain`, `admin` and you can also specify a custom repository role name, if the owning organization has defined any.
   * @type {string}
   * @memberof AddCollaboratorRequest
   */
  permission?: string
}
/**
 * How the author is associated with the repository.
 * @export
 * @enum {string}
 */

export const AuthorAssociation = {
  Collaborator: 'COLLABORATOR',
  Contributor: 'CONTRIBUTOR',
  FirstTimer: 'FIRST_TIMER',
  FirstTimeContributor: 'FIRST_TIME_CONTRIBUTOR',
  Mannequin: 'MANNEQUIN',
  Member: 'MEMBER',
  None: 'NONE',
  Owner: 'OWNER',
} as const

export type AuthorAssociation =
  typeof AuthorAssociation[keyof typeof AuthorAssociation]

/**
 * The status of auto merging a pull request.
 * @export
 * @interface AutoMerge
 */
export interface AutoMerge {
  /**
   *
   * @type {SimpleUser}
   * @memberof AutoMerge
   */
  enabled_by: SimpleUser
  /**
   * The merge method to use.
   * @type {string}
   * @memberof AutoMerge
   */
  merge_method: AutoMergeMergeMethodEnum
  /**
   * Title for the merge commit message.
   * @type {string}
   * @memberof AutoMerge
   */
  commit_title: string
  /**
   * Commit message for the merge commit.
   * @type {string}
   * @memberof AutoMerge
   */
  commit_message: string
}

export const AutoMergeMergeMethodEnum = {
  Merge: 'merge',
  Squash: 'squash',
  Rebase: 'rebase',
} as const

export type AutoMergeMergeMethodEnum =
  typeof AutoMergeMergeMethodEnum[keyof typeof AutoMergeMergeMethodEnum]

/**
 * Basic Error
 * @export
 * @interface BasicError
 */
export interface BasicError {
  /**
   *
   * @type {string}
   * @memberof BasicError
   */
  message?: string
  /**
   *
   * @type {string}
   * @memberof BasicError
   */
  documentation_url?: string
  /**
   *
   * @type {string}
   * @memberof BasicError
   */
  url?: string
  /**
   *
   * @type {string}
   * @memberof BasicError
   */
  status?: string
}
/**
 * Code Of Conduct
 * @export
 * @interface CodeOfConduct
 */
export interface CodeOfConduct {
  /**
   *
   * @type {string}
   * @memberof CodeOfConduct
   */
  key: string
  /**
   *
   * @type {string}
   * @memberof CodeOfConduct
   */
  name: string
  /**
   *
   * @type {string}
   * @memberof CodeOfConduct
   */
  url: string
  /**
   *
   * @type {string}
   * @memberof CodeOfConduct
   */
  body?: string
  /**
   *
   * @type {string}
   * @memberof CodeOfConduct
   */
  html_url: string | null
}
/**
 *
 * @export
 * @interface CreateNotification
 */
export interface CreateNotification {
  /**
   *
   * @type {number}
   * @memberof CreateNotification
   */
  post_id: number
  /**
   *
   * @type {string}
   * @memberof CreateNotification
   */
  action: string
  /**
   *
   * @type {boolean}
   * @memberof CreateNotification
   */
  checked: boolean
}
/**
 *
 * @export
 * @interface CreatePost
 */
export interface CreatePost {
  /**
   *
   * @type {string}
   * @memberof CreatePost
   */
  title: string
  /**
   *
   * @type {string}
   * @memberof CreatePost
   */
  pull_request: string
  /**
   *
   * @type {Array<string>}
   * @memberof CreatePost
   */
  languages: Array<string>
  /**
   *
   * @type {string}
   * @memberof CreatePost
   */
  pull_request_description: string
  /**
   *
   * @type {string}
   * @memberof CreatePost
   */
  review_point: string
}
/**
 * Hypermedia Link
 * @export
 * @interface Link
 */
export interface Link {
  /**
   *
   * @type {string}
   * @memberof Link
   */
  href: string
}
/**
 *
 * @export
 * @interface LoginUser
 */
export interface LoginUser {
  /**
   *
   * @type {string}
   * @memberof LoginUser
   */
  uid: string
  /**
   *
   * @type {string}
   * @memberof LoginUser
   */
  github_access_token: string
  /**
   *
   * @type {string}
   * @memberof LoginUser
   */
  name: string
  /**
   *
   * @type {string}
   * @memberof LoginUser
   */
  avatar: string
}
/**
 * Minimal Repository
 * @export
 * @interface MinimalRepository
 */
export interface MinimalRepository {
  /**
   *
   * @type {number}
   * @memberof MinimalRepository
   */
  id: number
  /**
   *
   * @type {string}
   * @memberof MinimalRepository
   */
  node_id: string
  /**
   *
   * @type {string}
   * @memberof MinimalRepository
   */
  name: string
  /**
   *
   * @type {string}
   * @memberof MinimalRepository
   */
  full_name: string
  /**
   *
   * @type {SimpleUser}
   * @memberof MinimalRepository
   */
  owner: SimpleUser
  /**
   *
   * @type {boolean}
   * @memberof MinimalRepository
   */
  private: boolean
  /**
   *
   * @type {string}
   * @memberof MinimalRepository
   */
  html_url: string
  /**
   *
   * @type {string}
   * @memberof MinimalRepository
   */
  description: string | null
  /**
   *
   * @type {boolean}
   * @memberof MinimalRepository
   */
  fork: boolean
  /**
   *
   * @type {string}
   * @memberof MinimalRepository
   */
  url: string
  /**
   *
   * @type {string}
   * @memberof MinimalRepository
   */
  archive_url: string
  /**
   *
   * @type {string}
   * @memberof MinimalRepository
   */
  assignees_url: string
  /**
   *
   * @type {string}
   * @memberof MinimalRepository
   */
  blobs_url: string
  /**
   *
   * @type {string}
   * @memberof MinimalRepository
   */
  branches_url: string
  /**
   *
   * @type {string}
   * @memberof MinimalRepository
   */
  collaborators_url: string
  /**
   *
   * @type {string}
   * @memberof MinimalRepository
   */
  comments_url: string
  /**
   *
   * @type {string}
   * @memberof MinimalRepository
   */
  commits_url: string
  /**
   *
   * @type {string}
   * @memberof MinimalRepository
   */
  compare_url: string
  /**
   *
   * @type {string}
   * @memberof MinimalRepository
   */
  contents_url: string
  /**
   *
   * @type {string}
   * @memberof MinimalRepository
   */
  contributors_url: string
  /**
   *
   * @type {string}
   * @memberof MinimalRepository
   */
  deployments_url: string
  /**
   *
   * @type {string}
   * @memberof MinimalRepository
   */
  downloads_url: string
  /**
   *
   * @type {string}
   * @memberof MinimalRepository
   */
  events_url: string
  /**
   *
   * @type {string}
   * @memberof MinimalRepository
   */
  forks_url: string
  /**
   *
   * @type {string}
   * @memberof MinimalRepository
   */
  git_commits_url: string
  /**
   *
   * @type {string}
   * @memberof MinimalRepository
   */
  git_refs_url: string
  /**
   *
   * @type {string}
   * @memberof MinimalRepository
   */
  git_tags_url: string
  /**
   *
   * @type {string}
   * @memberof MinimalRepository
   */
  git_url?: string
  /**
   *
   * @type {string}
   * @memberof MinimalRepository
   */
  issue_comment_url: string
  /**
   *
   * @type {string}
   * @memberof MinimalRepository
   */
  issue_events_url: string
  /**
   *
   * @type {string}
   * @memberof MinimalRepository
   */
  issues_url: string
  /**
   *
   * @type {string}
   * @memberof MinimalRepository
   */
  keys_url: string
  /**
   *
   * @type {string}
   * @memberof MinimalRepository
   */
  labels_url: string
  /**
   *
   * @type {string}
   * @memberof MinimalRepository
   */
  languages_url: string
  /**
   *
   * @type {string}
   * @memberof MinimalRepository
   */
  merges_url: string
  /**
   *
   * @type {string}
   * @memberof MinimalRepository
   */
  milestones_url: string
  /**
   *
   * @type {string}
   * @memberof MinimalRepository
   */
  notifications_url: string
  /**
   *
   * @type {string}
   * @memberof MinimalRepository
   */
  pulls_url: string
  /**
   *
   * @type {string}
   * @memberof MinimalRepository
   */
  releases_url: string
  /**
   *
   * @type {string}
   * @memberof MinimalRepository
   */
  ssh_url?: string
  /**
   *
   * @type {string}
   * @memberof MinimalRepository
   */
  stargazers_url: string
  /**
   *
   * @type {string}
   * @memberof MinimalRepository
   */
  statuses_url: string
  /**
   *
   * @type {string}
   * @memberof MinimalRepository
   */
  subscribers_url: string
  /**
   *
   * @type {string}
   * @memberof MinimalRepository
   */
  subscription_url: string
  /**
   *
   * @type {string}
   * @memberof MinimalRepository
   */
  tags_url: string
  /**
   *
   * @type {string}
   * @memberof MinimalRepository
   */
  teams_url: string
  /**
   *
   * @type {string}
   * @memberof MinimalRepository
   */
  trees_url: string
  /**
   *
   * @type {string}
   * @memberof MinimalRepository
   */
  clone_url?: string
  /**
   *
   * @type {string}
   * @memberof MinimalRepository
   */
  mirror_url?: string | null
  /**
   *
   * @type {string}
   * @memberof MinimalRepository
   */
  hooks_url: string
  /**
   *
   * @type {string}
   * @memberof MinimalRepository
   */
  svn_url?: string
  /**
   *
   * @type {string}
   * @memberof MinimalRepository
   */
  homepage?: string | null
  /**
   *
   * @type {string}
   * @memberof MinimalRepository
   */
  language?: string | null
  /**
   *
   * @type {number}
   * @memberof MinimalRepository
   */
  forks_count?: number
  /**
   *
   * @type {number}
   * @memberof MinimalRepository
   */
  stargazers_count?: number
  /**
   *
   * @type {number}
   * @memberof MinimalRepository
   */
  watchers_count?: number
  /**
   * The size of the repository. Size is calculated hourly. When a repository is initially created, the size is 0.
   * @type {number}
   * @memberof MinimalRepository
   */
  size?: number
  /**
   *
   * @type {string}
   * @memberof MinimalRepository
   */
  default_branch?: string
  /**
   *
   * @type {number}
   * @memberof MinimalRepository
   */
  open_issues_count?: number
  /**
   *
   * @type {boolean}
   * @memberof MinimalRepository
   */
  is_template?: boolean
  /**
   *
   * @type {Array<string>}
   * @memberof MinimalRepository
   */
  topics?: Array<string>
  /**
   *
   * @type {boolean}
   * @memberof MinimalRepository
   */
  has_issues?: boolean
  /**
   *
   * @type {boolean}
   * @memberof MinimalRepository
   */
  has_projects?: boolean
  /**
   *
   * @type {boolean}
   * @memberof MinimalRepository
   */
  has_wiki?: boolean
  /**
   *
   * @type {boolean}
   * @memberof MinimalRepository
   */
  has_pages?: boolean
  /**
   *
   * @type {boolean}
   * @memberof MinimalRepository
   */
  has_downloads?: boolean
  /**
   *
   * @type {boolean}
   * @memberof MinimalRepository
   */
  archived?: boolean
  /**
   *
   * @type {boolean}
   * @memberof MinimalRepository
   */
  disabled?: boolean
  /**
   *
   * @type {string}
   * @memberof MinimalRepository
   */
  visibility?: string
  /**
   *
   * @type {string}
   * @memberof MinimalRepository
   */
  pushed_at?: string | null
  /**
   *
   * @type {string}
   * @memberof MinimalRepository
   */
  created_at?: string | null
  /**
   *
   * @type {string}
   * @memberof MinimalRepository
   */
  updated_at?: string | null
  /**
   *
   * @type {MinimalRepositoryPermissions}
   * @memberof MinimalRepository
   */
  permissions?: MinimalRepositoryPermissions
  /**
   *
   * @type {string}
   * @memberof MinimalRepository
   */
  role_name?: string
  /**
   *
   * @type {string}
   * @memberof MinimalRepository
   */
  temp_clone_token?: string
  /**
   *
   * @type {boolean}
   * @memberof MinimalRepository
   */
  delete_branch_on_merge?: boolean
  /**
   *
   * @type {number}
   * @memberof MinimalRepository
   */
  subscribers_count?: number
  /**
   *
   * @type {number}
   * @memberof MinimalRepository
   */
  network_count?: number
  /**
   *
   * @type {CodeOfConduct}
   * @memberof MinimalRepository
   */
  code_of_conduct?: CodeOfConduct
  /**
   *
   * @type {MinimalRepositoryLicense}
   * @memberof MinimalRepository
   */
  license?: MinimalRepositoryLicense | null
  /**
   *
   * @type {number}
   * @memberof MinimalRepository
   */
  forks?: number
  /**
   *
   * @type {number}
   * @memberof MinimalRepository
   */
  open_issues?: number
  /**
   *
   * @type {number}
   * @memberof MinimalRepository
   */
  watchers?: number
  /**
   *
   * @type {boolean}
   * @memberof MinimalRepository
   */
  allow_forking?: boolean
  /**
   *
   * @type {boolean}
   * @memberof MinimalRepository
   */
  web_commit_signoff_required?: boolean
}
/**
 *
 * @export
 * @interface MinimalRepositoryLicense
 */
export interface MinimalRepositoryLicense {
  /**
   *
   * @type {string}
   * @memberof MinimalRepositoryLicense
   */
  key?: string
  /**
   *
   * @type {string}
   * @memberof MinimalRepositoryLicense
   */
  name?: string
  /**
   *
   * @type {string}
   * @memberof MinimalRepositoryLicense
   */
  spdx_id?: string
  /**
   *
   * @type {string}
   * @memberof MinimalRepositoryLicense
   */
  url?: string
  /**
   *
   * @type {string}
   * @memberof MinimalRepositoryLicense
   */
  node_id?: string
}
/**
 *
 * @export
 * @interface MinimalRepositoryPermissions
 */
export interface MinimalRepositoryPermissions {
  /**
   *
   * @type {boolean}
   * @memberof MinimalRepositoryPermissions
   */
  admin?: boolean
  /**
   *
   * @type {boolean}
   * @memberof MinimalRepositoryPermissions
   */
  maintain?: boolean
  /**
   *
   * @type {boolean}
   * @memberof MinimalRepositoryPermissions
   */
  push?: boolean
  /**
   *
   * @type {boolean}
   * @memberof MinimalRepositoryPermissions
   */
  triage?: boolean
  /**
   *
   * @type {boolean}
   * @memberof MinimalRepositoryPermissions
   */
  pull?: boolean
}
/**
 *
 * @export
 * @interface Notification
 */
export interface Notification {
  /**
   *
   * @type {number}
   * @memberof Notification
   */
  id: number
  /**
   *
   * @type {number}
   * @memberof Notification
   */
  post_id: number
  /**
   *
   * @type {string}
   * @memberof Notification
   */
  action: string
  /**
   *
   * @type {boolean}
   * @memberof Notification
   */
  checked: boolean
  /**
   *
   * @type {string}
   * @memberof Notification
   */
  created_at: string
  /**
   *
   * @type {string}
   * @memberof Notification
   */
  updated_at: string
}
/**
 * License Simple
 * @export
 * @interface NullableLicenseSimple
 */
export interface NullableLicenseSimple {
  /**
   *
   * @type {string}
   * @memberof NullableLicenseSimple
   */
  key: string
  /**
   *
   * @type {string}
   * @memberof NullableLicenseSimple
   */
  name: string
  /**
   *
   * @type {string}
   * @memberof NullableLicenseSimple
   */
  url: string | null
  /**
   *
   * @type {string}
   * @memberof NullableLicenseSimple
   */
  spdx_id: string | null
  /**
   *
   * @type {string}
   * @memberof NullableLicenseSimple
   */
  node_id: string
  /**
   *
   * @type {string}
   * @memberof NullableLicenseSimple
   */
  html_url?: string
}
/**
 * A collection of related issues and pull requests.
 * @export
 * @interface NullableMilestone
 */
export interface NullableMilestone {
  /**
   *
   * @type {string}
   * @memberof NullableMilestone
   */
  url: string
  /**
   *
   * @type {string}
   * @memberof NullableMilestone
   */
  html_url: string
  /**
   *
   * @type {string}
   * @memberof NullableMilestone
   */
  labels_url: string
  /**
   *
   * @type {number}
   * @memberof NullableMilestone
   */
  id: number
  /**
   *
   * @type {string}
   * @memberof NullableMilestone
   */
  node_id: string
  /**
   * The number of the milestone.
   * @type {number}
   * @memberof NullableMilestone
   */
  number: number
  /**
   * The state of the milestone.
   * @type {string}
   * @memberof NullableMilestone
   */
  state: NullableMilestoneStateEnum
  /**
   * The title of the milestone.
   * @type {string}
   * @memberof NullableMilestone
   */
  title: string
  /**
   *
   * @type {string}
   * @memberof NullableMilestone
   */
  description: string | null
  /**
   *
   * @type {NullableSimpleUser}
   * @memberof NullableMilestone
   */
  creator: NullableSimpleUser | null
  /**
   *
   * @type {number}
   * @memberof NullableMilestone
   */
  open_issues: number
  /**
   *
   * @type {number}
   * @memberof NullableMilestone
   */
  closed_issues: number
  /**
   *
   * @type {string}
   * @memberof NullableMilestone
   */
  created_at: string
  /**
   *
   * @type {string}
   * @memberof NullableMilestone
   */
  updated_at: string
  /**
   *
   * @type {string}
   * @memberof NullableMilestone
   */
  closed_at: string | null
  /**
   *
   * @type {string}
   * @memberof NullableMilestone
   */
  due_on: string | null
}

export const NullableMilestoneStateEnum = {
  Open: 'open',
  Closed: 'closed',
} as const

export type NullableMilestoneStateEnum =
  typeof NullableMilestoneStateEnum[keyof typeof NullableMilestoneStateEnum]

/**
 * Simple User
 * @export
 * @interface NullableSimpleUser
 */
export interface NullableSimpleUser {
  /**
   *
   * @type {string}
   * @memberof NullableSimpleUser
   */
  name?: string | null
  /**
   *
   * @type {string}
   * @memberof NullableSimpleUser
   */
  email?: string | null
  /**
   *
   * @type {string}
   * @memberof NullableSimpleUser
   */
  login: string
  /**
   *
   * @type {number}
   * @memberof NullableSimpleUser
   */
  id: number
  /**
   *
   * @type {string}
   * @memberof NullableSimpleUser
   */
  node_id: string
  /**
   *
   * @type {string}
   * @memberof NullableSimpleUser
   */
  avatar_url: string
  /**
   *
   * @type {string}
   * @memberof NullableSimpleUser
   */
  gravatar_id: string | null
  /**
   *
   * @type {string}
   * @memberof NullableSimpleUser
   */
  url: string
  /**
   *
   * @type {string}
   * @memberof NullableSimpleUser
   */
  html_url: string
  /**
   *
   * @type {string}
   * @memberof NullableSimpleUser
   */
  followers_url: string
  /**
   *
   * @type {string}
   * @memberof NullableSimpleUser
   */
  following_url: string
  /**
   *
   * @type {string}
   * @memberof NullableSimpleUser
   */
  gists_url: string
  /**
   *
   * @type {string}
   * @memberof NullableSimpleUser
   */
  starred_url: string
  /**
   *
   * @type {string}
   * @memberof NullableSimpleUser
   */
  subscriptions_url: string
  /**
   *
   * @type {string}
   * @memberof NullableSimpleUser
   */
  organizations_url: string
  /**
   *
   * @type {string}
   * @memberof NullableSimpleUser
   */
  repos_url: string
  /**
   *
   * @type {string}
   * @memberof NullableSimpleUser
   */
  events_url: string
  /**
   *
   * @type {string}
   * @memberof NullableSimpleUser
   */
  received_events_url: string
  /**
   *
   * @type {string}
   * @memberof NullableSimpleUser
   */
  type: string
  /**
   *
   * @type {boolean}
   * @memberof NullableSimpleUser
   */
  site_admin: boolean
  /**
   *
   * @type {string}
   * @memberof NullableSimpleUser
   */
  starred_at?: string
}
/**
 * Groups of organization members that gives permissions on specified repositories.
 * @export
 * @interface NullableTeamSimple
 */
export interface NullableTeamSimple {
  /**
   * Unique identifier of the team
   * @type {number}
   * @memberof NullableTeamSimple
   */
  id: number
  /**
   *
   * @type {string}
   * @memberof NullableTeamSimple
   */
  node_id: string
  /**
   * URL for the team
   * @type {string}
   * @memberof NullableTeamSimple
   */
  url: string
  /**
   *
   * @type {string}
   * @memberof NullableTeamSimple
   */
  members_url: string
  /**
   * Name of the team
   * @type {string}
   * @memberof NullableTeamSimple
   */
  name: string
  /**
   * Description of the team
   * @type {string}
   * @memberof NullableTeamSimple
   */
  description: string | null
  /**
   * Permission that the team will have for its repositories
   * @type {string}
   * @memberof NullableTeamSimple
   */
  permission: string
  /**
   * The level of privacy this team should have
   * @type {string}
   * @memberof NullableTeamSimple
   */
  privacy?: string
  /**
   *
   * @type {string}
   * @memberof NullableTeamSimple
   */
  html_url: string
  /**
   *
   * @type {string}
   * @memberof NullableTeamSimple
   */
  repositories_url: string
  /**
   *
   * @type {string}
   * @memberof NullableTeamSimple
   */
  slug: string
  /**
   * Distinguished Name (DN) that team maps to within LDAP environment
   * @type {string}
   * @memberof NullableTeamSimple
   */
  ldap_dn?: string
}
/**
 *
 * @export
 * @interface Post
 */
export interface Post {
  /**
   *
   * @type {number}
   * @memberof Post
   */
  id: number
  /**
   *
   * @type {number}
   * @memberof Post
   */
  reviewee: number
  /**
   *
   * @type {number}
   * @memberof Post
   */
  reviewer: number
  /**
   *
   * @type {string}
   * @memberof Post
   */
  title: string
  /**
   *
   * @type {string}
   * @memberof Post
   */
  pull_request: string
  /**
   *
   * @type {Array<string>}
   * @memberof Post
   */
  languages: Array<string>
  /**
   *
   * @type {string}
   * @memberof Post
   */
  pull_request_description: string
  /**
   *
   * @type {string}
   * @memberof Post
   */
  review_point: string
  /**
   *
   * @type {string}
   * @memberof Post
   */
  feedback: string
  /**
   *
   * @type {string}
   * @memberof Post
   */
  thanks: string
  /**
   *
   * @type {boolean}
   * @memberof Post
   */
  done: boolean
  /**
   *
   * @type {string}
   * @memberof Post
   */
  created_at: string
  /**
   *
   * @type {string}
   * @memberof Post
   */
  updated_at: string
}
/**
 * Pull Request Simple
 * @export
 * @interface PullRequestSimple
 */
export interface PullRequestSimple {
  /**
   *
   * @type {string}
   * @memberof PullRequestSimple
   */
  url: string
  /**
   *
   * @type {number}
   * @memberof PullRequestSimple
   */
  id: number
  /**
   *
   * @type {string}
   * @memberof PullRequestSimple
   */
  node_id: string
  /**
   *
   * @type {string}
   * @memberof PullRequestSimple
   */
  html_url: string
  /**
   *
   * @type {string}
   * @memberof PullRequestSimple
   */
  diff_url: string
  /**
   *
   * @type {string}
   * @memberof PullRequestSimple
   */
  patch_url: string
  /**
   *
   * @type {string}
   * @memberof PullRequestSimple
   */
  issue_url: string
  /**
   *
   * @type {string}
   * @memberof PullRequestSimple
   */
  commits_url: string
  /**
   *
   * @type {string}
   * @memberof PullRequestSimple
   */
  review_comments_url: string
  /**
   *
   * @type {string}
   * @memberof PullRequestSimple
   */
  review_comment_url: string
  /**
   *
   * @type {string}
   * @memberof PullRequestSimple
   */
  comments_url: string
  /**
   *
   * @type {string}
   * @memberof PullRequestSimple
   */
  statuses_url: string
  /**
   *
   * @type {number}
   * @memberof PullRequestSimple
   */
  number: number
  /**
   *
   * @type {string}
   * @memberof PullRequestSimple
   */
  state: string
  /**
   *
   * @type {boolean}
   * @memberof PullRequestSimple
   */
  locked: boolean
  /**
   *
   * @type {string}
   * @memberof PullRequestSimple
   */
  title: string
  /**
   *
   * @type {NullableSimpleUser}
   * @memberof PullRequestSimple
   */
  user: NullableSimpleUser | null
  /**
   *
   * @type {string}
   * @memberof PullRequestSimple
   */
  body: string | null
  /**
   *
   * @type {Array<PullRequestSimpleLabelsInner>}
   * @memberof PullRequestSimple
   */
  labels: Array<PullRequestSimpleLabelsInner>
  /**
   *
   * @type {NullableMilestone}
   * @memberof PullRequestSimple
   */
  milestone: NullableMilestone | null
  /**
   *
   * @type {string}
   * @memberof PullRequestSimple
   */
  active_lock_reason?: string | null
  /**
   *
   * @type {string}
   * @memberof PullRequestSimple
   */
  created_at: string
  /**
   *
   * @type {string}
   * @memberof PullRequestSimple
   */
  updated_at: string
  /**
   *
   * @type {string}
   * @memberof PullRequestSimple
   */
  closed_at: string | null
  /**
   *
   * @type {string}
   * @memberof PullRequestSimple
   */
  merged_at: string | null
  /**
   *
   * @type {string}
   * @memberof PullRequestSimple
   */
  merge_commit_sha: string | null
  /**
   *
   * @type {NullableSimpleUser}
   * @memberof PullRequestSimple
   */
  assignee: NullableSimpleUser | null
  /**
   *
   * @type {Array<SimpleUser>}
   * @memberof PullRequestSimple
   */
  assignees?: Array<SimpleUser> | null
  /**
   *
   * @type {Array<SimpleUser>}
   * @memberof PullRequestSimple
   */
  requested_reviewers?: Array<SimpleUser> | null
  /**
   *
   * @type {Array<Team>}
   * @memberof PullRequestSimple
   */
  requested_teams?: Array<Team> | null
  /**
   *
   * @type {PullRequestSimpleHead}
   * @memberof PullRequestSimple
   */
  head: PullRequestSimpleHead
  /**
   *
   * @type {PullRequestSimpleHead}
   * @memberof PullRequestSimple
   */
  base: PullRequestSimpleHead
  /**
   *
   * @type {PullRequestSimpleLinks}
   * @memberof PullRequestSimple
   */
  _links: PullRequestSimpleLinks
  /**
   *
   * @type {AuthorAssociation}
   * @memberof PullRequestSimple
   */
  author_association: AuthorAssociation
  /**
   *
   * @type {AutoMerge}
   * @memberof PullRequestSimple
   */
  auto_merge: AutoMerge | null
  /**
   * Indicates whether or not the pull request is a draft.
   * @type {boolean}
   * @memberof PullRequestSimple
   */
  draft?: boolean
}
/**
 *
 * @export
 * @interface PullRequestSimpleHead
 */
export interface PullRequestSimpleHead {
  /**
   *
   * @type {string}
   * @memberof PullRequestSimpleHead
   */
  label: string
  /**
   *
   * @type {string}
   * @memberof PullRequestSimpleHead
   */
  ref: string
  /**
   *
   * @type {Repository}
   * @memberof PullRequestSimpleHead
   */
  repo: Repository
  /**
   *
   * @type {string}
   * @memberof PullRequestSimpleHead
   */
  sha: string
  /**
   *
   * @type {NullableSimpleUser}
   * @memberof PullRequestSimpleHead
   */
  user: NullableSimpleUser | null
}
/**
 *
 * @export
 * @interface PullRequestSimpleLabelsInner
 */
export interface PullRequestSimpleLabelsInner {
  /**
   *
   * @type {number}
   * @memberof PullRequestSimpleLabelsInner
   */
  id: number
  /**
   *
   * @type {string}
   * @memberof PullRequestSimpleLabelsInner
   */
  node_id: string
  /**
   *
   * @type {string}
   * @memberof PullRequestSimpleLabelsInner
   */
  url: string
  /**
   *
   * @type {string}
   * @memberof PullRequestSimpleLabelsInner
   */
  name: string
  /**
   *
   * @type {string}
   * @memberof PullRequestSimpleLabelsInner
   */
  description: string
  /**
   *
   * @type {string}
   * @memberof PullRequestSimpleLabelsInner
   */
  color: string
  /**
   *
   * @type {boolean}
   * @memberof PullRequestSimpleLabelsInner
   */
  default: boolean
}
/**
 *
 * @export
 * @interface PullRequestSimpleLinks
 */
export interface PullRequestSimpleLinks {
  /**
   *
   * @type {Link}
   * @memberof PullRequestSimpleLinks
   */
  comments: Link
  /**
   *
   * @type {Link}
   * @memberof PullRequestSimpleLinks
   */
  commits: Link
  /**
   *
   * @type {Link}
   * @memberof PullRequestSimpleLinks
   */
  statuses: Link
  /**
   *
   * @type {Link}
   * @memberof PullRequestSimpleLinks
   */
  html: Link
  /**
   *
   * @type {Link}
   * @memberof PullRequestSimpleLinks
   */
  issue: Link
  /**
   *
   * @type {Link}
   * @memberof PullRequestSimpleLinks
   */
  review_comments: Link
  /**
   *
   * @type {Link}
   * @memberof PullRequestSimpleLinks
   */
  review_comment: Link
  /**
   *
   * @type {Link}
   * @memberof PullRequestSimpleLinks
   */
  self: Link
}
/**
 * A git repository
 * @export
 * @interface Repository
 */
export interface Repository {
  /**
   * Unique identifier of the repository
   * @type {number}
   * @memberof Repository
   */
  id: number
  /**
   *
   * @type {string}
   * @memberof Repository
   */
  node_id: string
  /**
   * The name of the repository.
   * @type {string}
   * @memberof Repository
   */
  name: string
  /**
   *
   * @type {string}
   * @memberof Repository
   */
  full_name: string
  /**
   *
   * @type {NullableLicenseSimple}
   * @memberof Repository
   */
  license: NullableLicenseSimple | null
  /**
   *
   * @type {NullableSimpleUser}
   * @memberof Repository
   */
  organization?: NullableSimpleUser | null
  /**
   *
   * @type {number}
   * @memberof Repository
   */
  forks: number
  /**
   *
   * @type {RepositoryPermissions}
   * @memberof Repository
   */
  permissions?: RepositoryPermissions
  /**
   *
   * @type {SimpleUser}
   * @memberof Repository
   */
  owner: SimpleUser
  /**
   * Whether the repository is private or public.
   * @type {boolean}
   * @memberof Repository
   */
  private: boolean
  /**
   *
   * @type {string}
   * @memberof Repository
   */
  html_url: string
  /**
   *
   * @type {string}
   * @memberof Repository
   */
  description: string | null
  /**
   *
   * @type {boolean}
   * @memberof Repository
   */
  fork: boolean
  /**
   *
   * @type {string}
   * @memberof Repository
   */
  url: string
  /**
   *
   * @type {string}
   * @memberof Repository
   */
  archive_url: string
  /**
   *
   * @type {string}
   * @memberof Repository
   */
  assignees_url: string
  /**
   *
   * @type {string}
   * @memberof Repository
   */
  blobs_url: string
  /**
   *
   * @type {string}
   * @memberof Repository
   */
  branches_url: string
  /**
   *
   * @type {string}
   * @memberof Repository
   */
  collaborators_url: string
  /**
   *
   * @type {string}
   * @memberof Repository
   */
  comments_url: string
  /**
   *
   * @type {string}
   * @memberof Repository
   */
  commits_url: string
  /**
   *
   * @type {string}
   * @memberof Repository
   */
  compare_url: string
  /**
   *
   * @type {string}
   * @memberof Repository
   */
  contents_url: string
  /**
   *
   * @type {string}
   * @memberof Repository
   */
  contributors_url: string
  /**
   *
   * @type {string}
   * @memberof Repository
   */
  deployments_url: string
  /**
   *
   * @type {string}
   * @memberof Repository
   */
  downloads_url: string
  /**
   *
   * @type {string}
   * @memberof Repository
   */
  events_url: string
  /**
   *
   * @type {string}
   * @memberof Repository
   */
  forks_url: string
  /**
   *
   * @type {string}
   * @memberof Repository
   */
  git_commits_url: string
  /**
   *
   * @type {string}
   * @memberof Repository
   */
  git_refs_url: string
  /**
   *
   * @type {string}
   * @memberof Repository
   */
  git_tags_url: string
  /**
   *
   * @type {string}
   * @memberof Repository
   */
  git_url: string
  /**
   *
   * @type {string}
   * @memberof Repository
   */
  issue_comment_url: string
  /**
   *
   * @type {string}
   * @memberof Repository
   */
  issue_events_url: string
  /**
   *
   * @type {string}
   * @memberof Repository
   */
  issues_url: string
  /**
   *
   * @type {string}
   * @memberof Repository
   */
  keys_url: string
  /**
   *
   * @type {string}
   * @memberof Repository
   */
  labels_url: string
  /**
   *
   * @type {string}
   * @memberof Repository
   */
  languages_url: string
  /**
   *
   * @type {string}
   * @memberof Repository
   */
  merges_url: string
  /**
   *
   * @type {string}
   * @memberof Repository
   */
  milestones_url: string
  /**
   *
   * @type {string}
   * @memberof Repository
   */
  notifications_url: string
  /**
   *
   * @type {string}
   * @memberof Repository
   */
  pulls_url: string
  /**
   *
   * @type {string}
   * @memberof Repository
   */
  releases_url: string
  /**
   *
   * @type {string}
   * @memberof Repository
   */
  ssh_url: string
  /**
   *
   * @type {string}
   * @memberof Repository
   */
  stargazers_url: string
  /**
   *
   * @type {string}
   * @memberof Repository
   */
  statuses_url: string
  /**
   *
   * @type {string}
   * @memberof Repository
   */
  subscribers_url: string
  /**
   *
   * @type {string}
   * @memberof Repository
   */
  subscription_url: string
  /**
   *
   * @type {string}
   * @memberof Repository
   */
  tags_url: string
  /**
   *
   * @type {string}
   * @memberof Repository
   */
  teams_url: string
  /**
   *
   * @type {string}
   * @memberof Repository
   */
  trees_url: string
  /**
   *
   * @type {string}
   * @memberof Repository
   */
  clone_url: string
  /**
   *
   * @type {string}
   * @memberof Repository
   */
  mirror_url: string | null
  /**
   *
   * @type {string}
   * @memberof Repository
   */
  hooks_url: string
  /**
   *
   * @type {string}
   * @memberof Repository
   */
  svn_url: string
  /**
   *
   * @type {string}
   * @memberof Repository
   */
  homepage: string | null
  /**
   *
   * @type {string}
   * @memberof Repository
   */
  language: string | null
  /**
   *
   * @type {number}
   * @memberof Repository
   */
  forks_count: number
  /**
   *
   * @type {number}
   * @memberof Repository
   */
  stargazers_count: number
  /**
   *
   * @type {number}
   * @memberof Repository
   */
  watchers_count: number
  /**
   * The size of the repository. Size is calculated hourly. When a repository is initially created, the size is 0.
   * @type {number}
   * @memberof Repository
   */
  size: number
  /**
   * The default branch of the repository.
   * @type {string}
   * @memberof Repository
   */
  default_branch: string
  /**
   *
   * @type {number}
   * @memberof Repository
   */
  open_issues_count: number
  /**
   * Whether this repository acts as a template that can be used to generate new repositories.
   * @type {boolean}
   * @memberof Repository
   */
  is_template?: boolean
  /**
   *
   * @type {Array<string>}
   * @memberof Repository
   */
  topics?: Array<string>
  /**
   * Whether issues are enabled.
   * @type {boolean}
   * @memberof Repository
   */
  has_issues: boolean
  /**
   * Whether projects are enabled.
   * @type {boolean}
   * @memberof Repository
   */
  has_projects: boolean
  /**
   * Whether the wiki is enabled.
   * @type {boolean}
   * @memberof Repository
   */
  has_wiki: boolean
  /**
   *
   * @type {boolean}
   * @memberof Repository
   */
  has_pages: boolean
  /**
   * Whether downloads are enabled.
   * @type {boolean}
   * @memberof Repository
   */
  has_downloads: boolean
  /**
   * Whether the repository is archived.
   * @type {boolean}
   * @memberof Repository
   */
  archived: boolean
  /**
   * Returns whether or not this repository disabled.
   * @type {boolean}
   * @memberof Repository
   */
  disabled: boolean
  /**
   * The repository visibility: public, private, or internal.
   * @type {string}
   * @memberof Repository
   */
  visibility?: string
  /**
   *
   * @type {string}
   * @memberof Repository
   */
  pushed_at: string | null
  /**
   *
   * @type {string}
   * @memberof Repository
   */
  created_at: string | null
  /**
   *
   * @type {string}
   * @memberof Repository
   */
  updated_at: string | null
  /**
   * Whether to allow rebase merges for pull requests.
   * @type {boolean}
   * @memberof Repository
   */
  allow_rebase_merge?: boolean
  /**
   *
   * @type {RepositoryTemplateRepository}
   * @memberof Repository
   */
  template_repository?: RepositoryTemplateRepository | null
  /**
   *
   * @type {string}
   * @memberof Repository
   */
  temp_clone_token?: string
  /**
   * Whether to allow squash merges for pull requests.
   * @type {boolean}
   * @memberof Repository
   */
  allow_squash_merge?: boolean
  /**
   * Whether to allow Auto-merge to be used on pull requests.
   * @type {boolean}
   * @memberof Repository
   */
  allow_auto_merge?: boolean
  /**
   * Whether to delete head branches when pull requests are merged
   * @type {boolean}
   * @memberof Repository
   */
  delete_branch_on_merge?: boolean
  /**
   * Whether or not a pull request head branch that is behind its base branch can always be updated even if it is not required to be up to date before merging.
   * @type {boolean}
   * @memberof Repository
   */
  allow_update_branch?: boolean
  /**
   * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
   * @type {boolean}
   * @memberof Repository
   * @deprecated
   */
  use_squash_pr_title_as_default?: boolean
  /**
   * The default value for a squash merge commit title:  - `PR_TITLE` - default to the pull request\'s title. - `COMMIT_OR_PR_TITLE` - default to the commit\'s title (if only one commit) or the pull request\'s title (when more than one commit).
   * @type {string}
   * @memberof Repository
   */
  squash_merge_commit_title?: RepositorySquashMergeCommitTitleEnum
  /**
   * The default value for a squash merge commit message:  - `PR_BODY` - default to the pull request\'s body. - `COMMIT_MESSAGES` - default to the branch\'s commit messages. - `BLANK` - default to a blank commit message.
   * @type {string}
   * @memberof Repository
   */
  squash_merge_commit_message?: RepositorySquashMergeCommitMessageEnum
  /**
   * The default value for a merge commit title.  - `PR_TITLE` - default to the pull request\'s title. - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
   * @type {string}
   * @memberof Repository
   */
  merge_commit_title?: RepositoryMergeCommitTitleEnum
  /**
   * The default value for a merge commit message.  - `PR_TITLE` - default to the pull request\'s title. - `PR_BODY` - default to the pull request\'s body. - `BLANK` - default to a blank commit message.
   * @type {string}
   * @memberof Repository
   */
  merge_commit_message?: RepositoryMergeCommitMessageEnum
  /**
   * Whether to allow merge commits for pull requests.
   * @type {boolean}
   * @memberof Repository
   */
  allow_merge_commit?: boolean
  /**
   * Whether to allow forking this repo
   * @type {boolean}
   * @memberof Repository
   */
  allow_forking?: boolean
  /**
   * Whether to require contributors to sign off on web-based commits
   * @type {boolean}
   * @memberof Repository
   */
  web_commit_signoff_required?: boolean
  /**
   *
   * @type {number}
   * @memberof Repository
   */
  subscribers_count?: number
  /**
   *
   * @type {number}
   * @memberof Repository
   */
  network_count?: number
  /**
   *
   * @type {number}
   * @memberof Repository
   */
  open_issues: number
  /**
   *
   * @type {number}
   * @memberof Repository
   */
  watchers: number
  /**
   *
   * @type {string}
   * @memberof Repository
   */
  master_branch?: string
  /**
   *
   * @type {string}
   * @memberof Repository
   */
  starred_at?: string
  /**
   * Whether anonymous git access is enabled for this repository
   * @type {boolean}
   * @memberof Repository
   */
  anonymous_access_enabled?: boolean
}

export const RepositorySquashMergeCommitTitleEnum = {
  PrTitle: 'PR_TITLE',
  CommitOrPrTitle: 'COMMIT_OR_PR_TITLE',
} as const

export type RepositorySquashMergeCommitTitleEnum =
  typeof RepositorySquashMergeCommitTitleEnum[keyof typeof RepositorySquashMergeCommitTitleEnum]
export const RepositorySquashMergeCommitMessageEnum = {
  PrBody: 'PR_BODY',
  CommitMessages: 'COMMIT_MESSAGES',
  Blank: 'BLANK',
} as const

export type RepositorySquashMergeCommitMessageEnum =
  typeof RepositorySquashMergeCommitMessageEnum[keyof typeof RepositorySquashMergeCommitMessageEnum]
export const RepositoryMergeCommitTitleEnum = {
  PrTitle: 'PR_TITLE',
  MergeMessage: 'MERGE_MESSAGE',
} as const

export type RepositoryMergeCommitTitleEnum =
  typeof RepositoryMergeCommitTitleEnum[keyof typeof RepositoryMergeCommitTitleEnum]
export const RepositoryMergeCommitMessageEnum = {
  PrBody: 'PR_BODY',
  PrTitle: 'PR_TITLE',
  Blank: 'BLANK',
} as const

export type RepositoryMergeCommitMessageEnum =
  typeof RepositoryMergeCommitMessageEnum[keyof typeof RepositoryMergeCommitMessageEnum]

/**
 * Repository invitations let you manage who you collaborate with.
 * @export
 * @interface RepositoryInvitation
 */
export interface RepositoryInvitation {
  /**
   * Unique identifier of the repository invitation.
   * @type {number}
   * @memberof RepositoryInvitation
   */
  id: number
  /**
   *
   * @type {MinimalRepository}
   * @memberof RepositoryInvitation
   */
  repository: MinimalRepository
  /**
   *
   * @type {NullableSimpleUser}
   * @memberof RepositoryInvitation
   */
  invitee: NullableSimpleUser | null
  /**
   *
   * @type {NullableSimpleUser}
   * @memberof RepositoryInvitation
   */
  inviter: NullableSimpleUser | null
  /**
   * The permission associated with the invitation.
   * @type {string}
   * @memberof RepositoryInvitation
   */
  permissions: RepositoryInvitationPermissionsEnum
  /**
   *
   * @type {string}
   * @memberof RepositoryInvitation
   */
  created_at: string
  /**
   * Whether or not the invitation has expired
   * @type {boolean}
   * @memberof RepositoryInvitation
   */
  expired?: boolean
  /**
   * URL for the repository invitation
   * @type {string}
   * @memberof RepositoryInvitation
   */
  url: string
  /**
   *
   * @type {string}
   * @memberof RepositoryInvitation
   */
  html_url: string
  /**
   *
   * @type {string}
   * @memberof RepositoryInvitation
   */
  node_id: string
}

export const RepositoryInvitationPermissionsEnum = {
  Read: 'read',
  Write: 'write',
  Admin: 'admin',
  Triage: 'triage',
  Maintain: 'maintain',
} as const

export type RepositoryInvitationPermissionsEnum =
  typeof RepositoryInvitationPermissionsEnum[keyof typeof RepositoryInvitationPermissionsEnum]

/**
 *
 * @export
 * @interface RepositoryPermissions
 */
export interface RepositoryPermissions {
  /**
   *
   * @type {boolean}
   * @memberof RepositoryPermissions
   */
  admin: boolean
  /**
   *
   * @type {boolean}
   * @memberof RepositoryPermissions
   */
  pull: boolean
  /**
   *
   * @type {boolean}
   * @memberof RepositoryPermissions
   */
  triage?: boolean
  /**
   *
   * @type {boolean}
   * @memberof RepositoryPermissions
   */
  push: boolean
  /**
   *
   * @type {boolean}
   * @memberof RepositoryPermissions
   */
  maintain?: boolean
}
/**
 *
 * @export
 * @interface RepositoryTemplateRepository
 */
export interface RepositoryTemplateRepository {
  /**
   *
   * @type {number}
   * @memberof RepositoryTemplateRepository
   */
  id?: number
  /**
   *
   * @type {string}
   * @memberof RepositoryTemplateRepository
   */
  node_id?: string
  /**
   *
   * @type {string}
   * @memberof RepositoryTemplateRepository
   */
  name?: string
  /**
   *
   * @type {string}
   * @memberof RepositoryTemplateRepository
   */
  full_name?: string
  /**
   *
   * @type {RepositoryTemplateRepositoryOwner}
   * @memberof RepositoryTemplateRepository
   */
  owner?: RepositoryTemplateRepositoryOwner
  /**
   *
   * @type {boolean}
   * @memberof RepositoryTemplateRepository
   */
  private?: boolean
  /**
   *
   * @type {string}
   * @memberof RepositoryTemplateRepository
   */
  html_url?: string
  /**
   *
   * @type {string}
   * @memberof RepositoryTemplateRepository
   */
  description?: string
  /**
   *
   * @type {boolean}
   * @memberof RepositoryTemplateRepository
   */
  fork?: boolean
  /**
   *
   * @type {string}
   * @memberof RepositoryTemplateRepository
   */
  url?: string
  /**
   *
   * @type {string}
   * @memberof RepositoryTemplateRepository
   */
  archive_url?: string
  /**
   *
   * @type {string}
   * @memberof RepositoryTemplateRepository
   */
  assignees_url?: string
  /**
   *
   * @type {string}
   * @memberof RepositoryTemplateRepository
   */
  blobs_url?: string
  /**
   *
   * @type {string}
   * @memberof RepositoryTemplateRepository
   */
  branches_url?: string
  /**
   *
   * @type {string}
   * @memberof RepositoryTemplateRepository
   */
  collaborators_url?: string
  /**
   *
   * @type {string}
   * @memberof RepositoryTemplateRepository
   */
  comments_url?: string
  /**
   *
   * @type {string}
   * @memberof RepositoryTemplateRepository
   */
  commits_url?: string
  /**
   *
   * @type {string}
   * @memberof RepositoryTemplateRepository
   */
  compare_url?: string
  /**
   *
   * @type {string}
   * @memberof RepositoryTemplateRepository
   */
  contents_url?: string
  /**
   *
   * @type {string}
   * @memberof RepositoryTemplateRepository
   */
  contributors_url?: string
  /**
   *
   * @type {string}
   * @memberof RepositoryTemplateRepository
   */
  deployments_url?: string
  /**
   *
   * @type {string}
   * @memberof RepositoryTemplateRepository
   */
  downloads_url?: string
  /**
   *
   * @type {string}
   * @memberof RepositoryTemplateRepository
   */
  events_url?: string
  /**
   *
   * @type {string}
   * @memberof RepositoryTemplateRepository
   */
  forks_url?: string
  /**
   *
   * @type {string}
   * @memberof RepositoryTemplateRepository
   */
  git_commits_url?: string
  /**
   *
   * @type {string}
   * @memberof RepositoryTemplateRepository
   */
  git_refs_url?: string
  /**
   *
   * @type {string}
   * @memberof RepositoryTemplateRepository
   */
  git_tags_url?: string
  /**
   *
   * @type {string}
   * @memberof RepositoryTemplateRepository
   */
  git_url?: string
  /**
   *
   * @type {string}
   * @memberof RepositoryTemplateRepository
   */
  issue_comment_url?: string
  /**
   *
   * @type {string}
   * @memberof RepositoryTemplateRepository
   */
  issue_events_url?: string
  /**
   *
   * @type {string}
   * @memberof RepositoryTemplateRepository
   */
  issues_url?: string
  /**
   *
   * @type {string}
   * @memberof RepositoryTemplateRepository
   */
  keys_url?: string
  /**
   *
   * @type {string}
   * @memberof RepositoryTemplateRepository
   */
  labels_url?: string
  /**
   *
   * @type {string}
   * @memberof RepositoryTemplateRepository
   */
  languages_url?: string
  /**
   *
   * @type {string}
   * @memberof RepositoryTemplateRepository
   */
  merges_url?: string
  /**
   *
   * @type {string}
   * @memberof RepositoryTemplateRepository
   */
  milestones_url?: string
  /**
   *
   * @type {string}
   * @memberof RepositoryTemplateRepository
   */
  notifications_url?: string
  /**
   *
   * @type {string}
   * @memberof RepositoryTemplateRepository
   */
  pulls_url?: string
  /**
   *
   * @type {string}
   * @memberof RepositoryTemplateRepository
   */
  releases_url?: string
  /**
   *
   * @type {string}
   * @memberof RepositoryTemplateRepository
   */
  ssh_url?: string
  /**
   *
   * @type {string}
   * @memberof RepositoryTemplateRepository
   */
  stargazers_url?: string
  /**
   *
   * @type {string}
   * @memberof RepositoryTemplateRepository
   */
  statuses_url?: string
  /**
   *
   * @type {string}
   * @memberof RepositoryTemplateRepository
   */
  subscribers_url?: string
  /**
   *
   * @type {string}
   * @memberof RepositoryTemplateRepository
   */
  subscription_url?: string
  /**
   *
   * @type {string}
   * @memberof RepositoryTemplateRepository
   */
  tags_url?: string
  /**
   *
   * @type {string}
   * @memberof RepositoryTemplateRepository
   */
  teams_url?: string
  /**
   *
   * @type {string}
   * @memberof RepositoryTemplateRepository
   */
  trees_url?: string
  /**
   *
   * @type {string}
   * @memberof RepositoryTemplateRepository
   */
  clone_url?: string
  /**
   *
   * @type {string}
   * @memberof RepositoryTemplateRepository
   */
  mirror_url?: string
  /**
   *
   * @type {string}
   * @memberof RepositoryTemplateRepository
   */
  hooks_url?: string
  /**
   *
   * @type {string}
   * @memberof RepositoryTemplateRepository
   */
  svn_url?: string
  /**
   *
   * @type {string}
   * @memberof RepositoryTemplateRepository
   */
  homepage?: string
  /**
   *
   * @type {string}
   * @memberof RepositoryTemplateRepository
   */
  language?: string
  /**
   *
   * @type {number}
   * @memberof RepositoryTemplateRepository
   */
  forks_count?: number
  /**
   *
   * @type {number}
   * @memberof RepositoryTemplateRepository
   */
  stargazers_count?: number
  /**
   *
   * @type {number}
   * @memberof RepositoryTemplateRepository
   */
  watchers_count?: number
  /**
   *
   * @type {number}
   * @memberof RepositoryTemplateRepository
   */
  size?: number
  /**
   *
   * @type {string}
   * @memberof RepositoryTemplateRepository
   */
  default_branch?: string
  /**
   *
   * @type {number}
   * @memberof RepositoryTemplateRepository
   */
  open_issues_count?: number
  /**
   *
   * @type {boolean}
   * @memberof RepositoryTemplateRepository
   */
  is_template?: boolean
  /**
   *
   * @type {Array<string>}
   * @memberof RepositoryTemplateRepository
   */
  topics?: Array<string>
  /**
   *
   * @type {boolean}
   * @memberof RepositoryTemplateRepository
   */
  has_issues?: boolean
  /**
   *
   * @type {boolean}
   * @memberof RepositoryTemplateRepository
   */
  has_projects?: boolean
  /**
   *
   * @type {boolean}
   * @memberof RepositoryTemplateRepository
   */
  has_wiki?: boolean
  /**
   *
   * @type {boolean}
   * @memberof RepositoryTemplateRepository
   */
  has_pages?: boolean
  /**
   *
   * @type {boolean}
   * @memberof RepositoryTemplateRepository
   */
  has_downloads?: boolean
  /**
   *
   * @type {boolean}
   * @memberof RepositoryTemplateRepository
   */
  archived?: boolean
  /**
   *
   * @type {boolean}
   * @memberof RepositoryTemplateRepository
   */
  disabled?: boolean
  /**
   *
   * @type {string}
   * @memberof RepositoryTemplateRepository
   */
  visibility?: string
  /**
   *
   * @type {string}
   * @memberof RepositoryTemplateRepository
   */
  pushed_at?: string
  /**
   *
   * @type {string}
   * @memberof RepositoryTemplateRepository
   */
  created_at?: string
  /**
   *
   * @type {string}
   * @memberof RepositoryTemplateRepository
   */
  updated_at?: string
  /**
   *
   * @type {MinimalRepositoryPermissions}
   * @memberof RepositoryTemplateRepository
   */
  permissions?: MinimalRepositoryPermissions
  /**
   *
   * @type {boolean}
   * @memberof RepositoryTemplateRepository
   */
  allow_rebase_merge?: boolean
  /**
   *
   * @type {string}
   * @memberof RepositoryTemplateRepository
   */
  temp_clone_token?: string
  /**
   *
   * @type {boolean}
   * @memberof RepositoryTemplateRepository
   */
  allow_squash_merge?: boolean
  /**
   *
   * @type {boolean}
   * @memberof RepositoryTemplateRepository
   */
  allow_auto_merge?: boolean
  /**
   *
   * @type {boolean}
   * @memberof RepositoryTemplateRepository
   */
  delete_branch_on_merge?: boolean
  /**
   *
   * @type {boolean}
   * @memberof RepositoryTemplateRepository
   */
  allow_update_branch?: boolean
  /**
   *
   * @type {boolean}
   * @memberof RepositoryTemplateRepository
   */
  use_squash_pr_title_as_default?: boolean
  /**
   * The default value for a squash merge commit title:  - `PR_TITLE` - default to the pull request\'s title. - `COMMIT_OR_PR_TITLE` - default to the commit\'s title (if only one commit) or the pull request\'s title (when more than one commit).
   * @type {string}
   * @memberof RepositoryTemplateRepository
   */
  squash_merge_commit_title?: RepositoryTemplateRepositorySquashMergeCommitTitleEnum
  /**
   * The default value for a squash merge commit message:  - `PR_BODY` - default to the pull request\'s body. - `COMMIT_MESSAGES` - default to the branch\'s commit messages. - `BLANK` - default to a blank commit message.
   * @type {string}
   * @memberof RepositoryTemplateRepository
   */
  squash_merge_commit_message?: RepositoryTemplateRepositorySquashMergeCommitMessageEnum
  /**
   * The default value for a merge commit title.  - `PR_TITLE` - default to the pull request\'s title. - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
   * @type {string}
   * @memberof RepositoryTemplateRepository
   */
  merge_commit_title?: RepositoryTemplateRepositoryMergeCommitTitleEnum
  /**
   * The default value for a merge commit message.  - `PR_TITLE` - default to the pull request\'s title. - `PR_BODY` - default to the pull request\'s body. - `BLANK` - default to a blank commit message.
   * @type {string}
   * @memberof RepositoryTemplateRepository
   */
  merge_commit_message?: RepositoryTemplateRepositoryMergeCommitMessageEnum
  /**
   *
   * @type {boolean}
   * @memberof RepositoryTemplateRepository
   */
  allow_merge_commit?: boolean
  /**
   *
   * @type {number}
   * @memberof RepositoryTemplateRepository
   */
  subscribers_count?: number
  /**
   *
   * @type {number}
   * @memberof RepositoryTemplateRepository
   */
  network_count?: number
}

export const RepositoryTemplateRepositorySquashMergeCommitTitleEnum = {
  PrTitle: 'PR_TITLE',
  CommitOrPrTitle: 'COMMIT_OR_PR_TITLE',
} as const

export type RepositoryTemplateRepositorySquashMergeCommitTitleEnum =
  typeof RepositoryTemplateRepositorySquashMergeCommitTitleEnum[keyof typeof RepositoryTemplateRepositorySquashMergeCommitTitleEnum]
export const RepositoryTemplateRepositorySquashMergeCommitMessageEnum = {
  PrBody: 'PR_BODY',
  CommitMessages: 'COMMIT_MESSAGES',
  Blank: 'BLANK',
} as const

export type RepositoryTemplateRepositorySquashMergeCommitMessageEnum =
  typeof RepositoryTemplateRepositorySquashMergeCommitMessageEnum[keyof typeof RepositoryTemplateRepositorySquashMergeCommitMessageEnum]
export const RepositoryTemplateRepositoryMergeCommitTitleEnum = {
  PrTitle: 'PR_TITLE',
  MergeMessage: 'MERGE_MESSAGE',
} as const

export type RepositoryTemplateRepositoryMergeCommitTitleEnum =
  typeof RepositoryTemplateRepositoryMergeCommitTitleEnum[keyof typeof RepositoryTemplateRepositoryMergeCommitTitleEnum]
export const RepositoryTemplateRepositoryMergeCommitMessageEnum = {
  PrBody: 'PR_BODY',
  PrTitle: 'PR_TITLE',
  Blank: 'BLANK',
} as const

export type RepositoryTemplateRepositoryMergeCommitMessageEnum =
  typeof RepositoryTemplateRepositoryMergeCommitMessageEnum[keyof typeof RepositoryTemplateRepositoryMergeCommitMessageEnum]

/**
 *
 * @export
 * @interface RepositoryTemplateRepositoryOwner
 */
export interface RepositoryTemplateRepositoryOwner {
  /**
   *
   * @type {string}
   * @memberof RepositoryTemplateRepositoryOwner
   */
  login?: string
  /**
   *
   * @type {number}
   * @memberof RepositoryTemplateRepositoryOwner
   */
  id?: number
  /**
   *
   * @type {string}
   * @memberof RepositoryTemplateRepositoryOwner
   */
  node_id?: string
  /**
   *
   * @type {string}
   * @memberof RepositoryTemplateRepositoryOwner
   */
  avatar_url?: string
  /**
   *
   * @type {string}
   * @memberof RepositoryTemplateRepositoryOwner
   */
  gravatar_id?: string
  /**
   *
   * @type {string}
   * @memberof RepositoryTemplateRepositoryOwner
   */
  url?: string
  /**
   *
   * @type {string}
   * @memberof RepositoryTemplateRepositoryOwner
   */
  html_url?: string
  /**
   *
   * @type {string}
   * @memberof RepositoryTemplateRepositoryOwner
   */
  followers_url?: string
  /**
   *
   * @type {string}
   * @memberof RepositoryTemplateRepositoryOwner
   */
  following_url?: string
  /**
   *
   * @type {string}
   * @memberof RepositoryTemplateRepositoryOwner
   */
  gists_url?: string
  /**
   *
   * @type {string}
   * @memberof RepositoryTemplateRepositoryOwner
   */
  starred_url?: string
  /**
   *
   * @type {string}
   * @memberof RepositoryTemplateRepositoryOwner
   */
  subscriptions_url?: string
  /**
   *
   * @type {string}
   * @memberof RepositoryTemplateRepositoryOwner
   */
  organizations_url?: string
  /**
   *
   * @type {string}
   * @memberof RepositoryTemplateRepositoryOwner
   */
  repos_url?: string
  /**
   *
   * @type {string}
   * @memberof RepositoryTemplateRepositoryOwner
   */
  events_url?: string
  /**
   *
   * @type {string}
   * @memberof RepositoryTemplateRepositoryOwner
   */
  received_events_url?: string
  /**
   *
   * @type {string}
   * @memberof RepositoryTemplateRepositoryOwner
   */
  type?: string
  /**
   *
   * @type {boolean}
   * @memberof RepositoryTemplateRepositoryOwner
   */
  site_admin?: boolean
}
/**
 *
 * @export
 * @interface ReviewRequestRequest
 */
export interface ReviewRequestRequest {
  /**
   * An array of user `login`s that will be requested.
   * @type {Array<string>}
   * @memberof ReviewRequestRequest
   */
  reviewers?: Array<string>
  /**
   * An array of team `slug`s that will be requested.
   * @type {Array<string>}
   * @memberof ReviewRequestRequest
   */
  team_reviewers?: Array<string>
}
/**
 * Simple User
 * @export
 * @interface SimpleUser
 */
export interface SimpleUser {
  /**
   *
   * @type {string}
   * @memberof SimpleUser
   */
  name?: string | null
  /**
   *
   * @type {string}
   * @memberof SimpleUser
   */
  email?: string | null
  /**
   *
   * @type {string}
   * @memberof SimpleUser
   */
  login: string
  /**
   *
   * @type {number}
   * @memberof SimpleUser
   */
  id: number
  /**
   *
   * @type {string}
   * @memberof SimpleUser
   */
  node_id: string
  /**
   *
   * @type {string}
   * @memberof SimpleUser
   */
  avatar_url: string
  /**
   *
   * @type {string}
   * @memberof SimpleUser
   */
  gravatar_id: string | null
  /**
   *
   * @type {string}
   * @memberof SimpleUser
   */
  url: string
  /**
   *
   * @type {string}
   * @memberof SimpleUser
   */
  html_url: string
  /**
   *
   * @type {string}
   * @memberof SimpleUser
   */
  followers_url: string
  /**
   *
   * @type {string}
   * @memberof SimpleUser
   */
  following_url: string
  /**
   *
   * @type {string}
   * @memberof SimpleUser
   */
  gists_url: string
  /**
   *
   * @type {string}
   * @memberof SimpleUser
   */
  starred_url: string
  /**
   *
   * @type {string}
   * @memberof SimpleUser
   */
  subscriptions_url: string
  /**
   *
   * @type {string}
   * @memberof SimpleUser
   */
  organizations_url: string
  /**
   *
   * @type {string}
   * @memberof SimpleUser
   */
  repos_url: string
  /**
   *
   * @type {string}
   * @memberof SimpleUser
   */
  events_url: string
  /**
   *
   * @type {string}
   * @memberof SimpleUser
   */
  received_events_url: string
  /**
   *
   * @type {string}
   * @memberof SimpleUser
   */
  type: string
  /**
   *
   * @type {boolean}
   * @memberof SimpleUser
   */
  site_admin: boolean
  /**
   *
   * @type {string}
   * @memberof SimpleUser
   */
  starred_at?: string
}
/**
 * Groups of organization members that gives permissions on specified repositories.
 * @export
 * @interface Team
 */
export interface Team {
  /**
   *
   * @type {number}
   * @memberof Team
   */
  id: number
  /**
   *
   * @type {string}
   * @memberof Team
   */
  node_id: string
  /**
   *
   * @type {string}
   * @memberof Team
   */
  name: string
  /**
   *
   * @type {string}
   * @memberof Team
   */
  slug: string
  /**
   *
   * @type {string}
   * @memberof Team
   */
  description: string | null
  /**
   *
   * @type {string}
   * @memberof Team
   */
  privacy?: string
  /**
   *
   * @type {string}
   * @memberof Team
   */
  permission: string
  /**
   *
   * @type {TeamPermissions}
   * @memberof Team
   */
  permissions?: TeamPermissions
  /**
   *
   * @type {string}
   * @memberof Team
   */
  url: string
  /**
   *
   * @type {string}
   * @memberof Team
   */
  html_url: string
  /**
   *
   * @type {string}
   * @memberof Team
   */
  members_url: string
  /**
   *
   * @type {string}
   * @memberof Team
   */
  repositories_url: string
  /**
   *
   * @type {NullableTeamSimple}
   * @memberof Team
   */
  parent: NullableTeamSimple | null
}
/**
 *
 * @export
 * @interface TeamPermissions
 */
export interface TeamPermissions {
  /**
   *
   * @type {boolean}
   * @memberof TeamPermissions
   */
  pull: boolean
  /**
   *
   * @type {boolean}
   * @memberof TeamPermissions
   */
  triage: boolean
  /**
   *
   * @type {boolean}
   * @memberof TeamPermissions
   */
  push: boolean
  /**
   *
   * @type {boolean}
   * @memberof TeamPermissions
   */
  maintain: boolean
  /**
   *
   * @type {boolean}
   * @memberof TeamPermissions
   */
  admin: boolean
}
/**
 *
 * @export
 * @interface UpdateNotification
 */
export interface UpdateNotification {
  /**
   *
   * @type {boolean}
   * @memberof UpdateNotification
   */
  checked: boolean
}
/**
 *
 * @export
 * @interface UpdatePost
 */
export interface UpdatePost {
  /**
   *
   * @type {string}
   * @memberof UpdatePost
   */
  title?: string
  /**
   *
   * @type {string}
   * @memberof UpdatePost
   */
  pull_request?: string
  /**
   *
   * @type {Array<string>}
   * @memberof UpdatePost
   */
  languages?: Array<string>
  /**
   *
   * @type {string}
   * @memberof UpdatePost
   */
  pull_request_description?: string
  /**
   *
   * @type {string}
   * @memberof UpdatePost
   */
  review_point?: string
  /**
   *
   * @type {string}
   * @memberof UpdatePost
   */
  feedback?: string
  /**
   *
   * @type {string}
   * @memberof UpdatePost
   */
  thanks?: string
  /**
   *
   * @type {boolean}
   * @memberof UpdatePost
   */
  done?: boolean
}
/**
 *
 * @export
 * @interface User
 */
export interface User {
  /**
   *
   * @type {number}
   * @memberof User
   */
  id: number
  /**
   *
   * @type {string}
   * @memberof User
   */
  uid: string
  /**
   *
   * @type {string}
   * @memberof User
   */
  github_access_token: string
  /**
   *
   * @type {string}
   * @memberof User
   */
  name: string
  /**
   *
   * @type {string}
   * @memberof User
   */
  avatar: string
  /**
   *
   * @type {string}
   * @memberof User
   */
  created_at: string
  /**
   *
   * @type {string}
   * @memberof User
   */
  updated_at: string
}
/**
 * Validation Error
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
  /**
   *
   * @type {string}
   * @memberof ValidationError
   */
  message: string
  /**
   *
   * @type {string}
   * @memberof ValidationError
   */
  documentation_url: string
  /**
   *
   * @type {Array<ValidationErrorErrorsInner>}
   * @memberof ValidationError
   */
  errors?: Array<ValidationErrorErrorsInner>
}
/**
 *
 * @export
 * @interface ValidationErrorErrorsInner
 */
export interface ValidationErrorErrorsInner {
  /**
   *
   * @type {string}
   * @memberof ValidationErrorErrorsInner
   */
  resource?: string
  /**
   *
   * @type {string}
   * @memberof ValidationErrorErrorsInner
   */
  field?: string
  /**
   *
   * @type {string}
   * @memberof ValidationErrorErrorsInner
   */
  message?: string
  /**
   *
   * @type {string}
   * @memberof ValidationErrorErrorsInner
   */
  code: string
  /**
   *
   * @type {number}
   * @memberof ValidationErrorErrorsInner
   */
  index?: number
  /**
   *
   * @type {ValidationErrorErrorsInnerValue}
   * @memberof ValidationErrorErrorsInner
   */
  value?: ValidationErrorErrorsInnerValue
}
/**
 * @type ValidationErrorErrorsInnerValue
 * @export
 */
export type ValidationErrorErrorsInnerValue = Array<string> | number | string

/**
 * GitHubApi - axios parameter creator
 * @export
 */
export const GitHubApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @summary Accept a repository invitation
     * @param {number} invitationId The unique identifier of the invitation.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    acceptInvitation: async (
      invitationId: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'invitationId' is not null or undefined
      assertParamExists('acceptInvitation', 'invitationId', invitationId)
      const localVarPath =
        `/user/repository_invitations/{invitation_id}`.replace(
          `{${'invitation_id'}}`,
          encodeURIComponent(String(invitationId)),
        )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'PATCH',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \"[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\" and \"[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\" for details.  Adding an outside collaborator may be restricted by enterprise administrators. For more information, see \"[Enforcing repository management policies in your enterprise](https://docs.github.com/enterprise-cloud@latest/admin/policies/enforcing-policies-for-your-enterprise/enforcing-repository-management-policies-in-your-enterprise#enforcing-a-policy-for-inviting-outside-collaborators-to-repositories).\"  For more information on permission levels, see \"[Repository permission levels for an organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization#permission-levels-for-repositories-owned-by-an-organization)\". There are restrictions on which permissions can be granted to organization members when an organization base role is in place. In this case, the permission being given must be equal to or higher than the org base permission. Otherwise, the request will fail with:  ``` Cannot assign {member} permission of {role name} ```  Note that, if you choose not to pass any parameters, you\'ll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs).\"  The invitee will receive a notification that they have been invited to the repository, which they must accept or decline. They may do this via the notifications page, the email they receive, or by using the [repository invitations API endpoints](https://docs.github.com/rest/reference/repos#invitations).  **Updating an existing collaborator\'s permission level**  The endpoint can also be used to change the permissions of an existing collaborator without first removing and re-adding the collaborator. To change the permissions, use the same endpoint and pass a different `permission` parameter. The response will be a `204`, with no other indication that the permission level changed.  **Rate limits**  You are limited to sending 50 invitations to a repository per 24 hour period. Note there is no limit if you are inviting organization members to an organization repository.
     * @summary Add a repository collaborator
     * @param {string} owner The account owner of the repository. The name is not case sensitive.
     * @param {string} repo The name of the repository. The name is not case sensitive.
     * @param {string} username The handle for the GitHub user account.
     * @param {AddCollaboratorRequest} [addCollaboratorRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addCollaborator: async (
      owner: string,
      repo: string,
      username: string,
      addCollaboratorRequest?: AddCollaboratorRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'owner' is not null or undefined
      assertParamExists('addCollaborator', 'owner', owner)
      // verify required parameter 'repo' is not null or undefined
      assertParamExists('addCollaborator', 'repo', repo)
      // verify required parameter 'username' is not null or undefined
      assertParamExists('addCollaborator', 'username', username)
      const localVarPath = `/repos/{owner}/{repo}/collaborators/{username}`
        .replace(`{${'owner'}}`, encodeURIComponent(String(owner)))
        .replace(`{${'repo'}}`, encodeURIComponent(String(repo)))
        .replace(`{${'username'}}`, encodeURIComponent(String(username)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        addCollaboratorRequest,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * When authenticating as a user with admin rights to a repository, this endpoint will list all currently open repository invitations.
     * @summary List repository invitations
     * @param {string} owner The account owner of the repository. The name is not case sensitive.
     * @param {string} repo The name of the repository. The name is not case sensitive.
     * @param {number} [perPage] The number of results per page (max 100).
     * @param {number} [page] Page number of the results to fetch.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInvitations: async (
      owner: string,
      repo: string,
      perPage?: number,
      page?: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'owner' is not null or undefined
      assertParamExists('getInvitations', 'owner', owner)
      // verify required parameter 'repo' is not null or undefined
      assertParamExists('getInvitations', 'repo', repo)
      const localVarPath = `/repos/{owner}/{repo}/invitations`
        .replace(`{${'owner'}}`, encodeURIComponent(String(owner)))
        .replace(`{${'repo'}}`, encodeURIComponent(String(repo)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (perPage !== undefined) {
        localVarQueryParameter['per_page'] = perPage
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Lists all public repositories in the order that they were created.  Note: - For GitHub Enterprise Server, this endpoint will only list repositories available to all users on the enterprise. - Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header) to get the URL for the next page of repositories.
     * @summary List public repositories
     * @param {number} [since] A repository ID. Only return repositories with an ID greater than this ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPublicRepos: async (
      since?: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/repositories`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (since !== undefined) {
        localVarQueryParameter['since'] = since
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub\'s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     * @summary List pull requests
     * @param {string} owner The account owner of the repository. The name is not case sensitive.
     * @param {string} repo The name of the repository. The name is not case sensitive.
     * @param {'open' | 'closed' | 'all'} [state] Either &#x60;open&#x60;, &#x60;closed&#x60;, or &#x60;all&#x60; to filter by state.
     * @param {string} [head] Filter pulls by head user or head organization and branch name in the format of &#x60;user:ref-name&#x60; or &#x60;organization:ref-name&#x60;. For example: &#x60;github:new-script-format&#x60; or &#x60;octocat:test-branch&#x60;.
     * @param {string} [base] Filter pulls by base branch name. Example: &#x60;gh-pages&#x60;.
     * @param {'created' | 'updated' | 'popularity' | 'long-running'} [sort] What to sort results by. &#x60;popularity&#x60; will sort by the number of comments. &#x60;long-running&#x60; will sort by date created and will limit the results to pull requests that have been open for more than a month and have had activity within the past month.
     * @param {'asc' | 'desc'} [direction] The direction of the sort. Default: &#x60;desc&#x60; when sort is &#x60;created&#x60; or sort is not specified, otherwise &#x60;asc&#x60;.
     * @param {number} [perPage] The number of results per page (max 100).
     * @param {number} [page] Page number of the results to fetch.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPulls: async (
      owner: string,
      repo: string,
      state?: 'open' | 'closed' | 'all',
      head?: string,
      base?: string,
      sort?: 'created' | 'updated' | 'popularity' | 'long-running',
      direction?: 'asc' | 'desc',
      perPage?: number,
      page?: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'owner' is not null or undefined
      assertParamExists('getPulls', 'owner', owner)
      // verify required parameter 'repo' is not null or undefined
      assertParamExists('getPulls', 'repo', repo)
      const localVarPath = `/repos/{owner}/{repo}/pulls`
        .replace(`{${'owner'}}`, encodeURIComponent(String(owner)))
        .replace(`{${'repo'}}`, encodeURIComponent(String(repo)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (state !== undefined) {
        localVarQueryParameter['state'] = state
      }

      if (head !== undefined) {
        localVarQueryParameter['head'] = head
      }

      if (base !== undefined) {
        localVarQueryParameter['base'] = base
      }

      if (sort !== undefined) {
        localVarQueryParameter['sort'] = sort
      }

      if (direction !== undefined) {
        localVarQueryParameter['direction'] = direction
      }

      if (perPage !== undefined) {
        localVarQueryParameter['per_page'] = perPage
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \"[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\" and \"[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\" for details.
     * @summary Request reviewers for a pull request
     * @param {string} owner The account owner of the repository. The name is not case sensitive.
     * @param {string} repo The name of the repository. The name is not case sensitive.
     * @param {number} pullNumber The number that identifies the pull request.
     * @param {ReviewRequestRequest} [reviewRequestRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reviewRequest: async (
      owner: string,
      repo: string,
      pullNumber: number,
      reviewRequestRequest?: ReviewRequestRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'owner' is not null or undefined
      assertParamExists('reviewRequest', 'owner', owner)
      // verify required parameter 'repo' is not null or undefined
      assertParamExists('reviewRequest', 'repo', repo)
      // verify required parameter 'pullNumber' is not null or undefined
      assertParamExists('reviewRequest', 'pullNumber', pullNumber)
      const localVarPath =
        `/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers`
          .replace(`{${'owner'}}`, encodeURIComponent(String(owner)))
          .replace(`{${'repo'}}`, encodeURIComponent(String(repo)))
          .replace(`{${'pull_number'}}`, encodeURIComponent(String(pullNumber)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        reviewRequestRequest,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * GitHubApi - functional programming interface
 * @export
 */
export const GitHubApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = GitHubApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary Accept a repository invitation
     * @param {number} invitationId The unique identifier of the invitation.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async acceptInvitation(
      invitationId: number,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.acceptInvitation(invitationId, options)
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     * This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \"[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\" and \"[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\" for details.  Adding an outside collaborator may be restricted by enterprise administrators. For more information, see \"[Enforcing repository management policies in your enterprise](https://docs.github.com/enterprise-cloud@latest/admin/policies/enforcing-policies-for-your-enterprise/enforcing-repository-management-policies-in-your-enterprise#enforcing-a-policy-for-inviting-outside-collaborators-to-repositories).\"  For more information on permission levels, see \"[Repository permission levels for an organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization#permission-levels-for-repositories-owned-by-an-organization)\". There are restrictions on which permissions can be granted to organization members when an organization base role is in place. In this case, the permission being given must be equal to or higher than the org base permission. Otherwise, the request will fail with:  ``` Cannot assign {member} permission of {role name} ```  Note that, if you choose not to pass any parameters, you\'ll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs).\"  The invitee will receive a notification that they have been invited to the repository, which they must accept or decline. They may do this via the notifications page, the email they receive, or by using the [repository invitations API endpoints](https://docs.github.com/rest/reference/repos#invitations).  **Updating an existing collaborator\'s permission level**  The endpoint can also be used to change the permissions of an existing collaborator without first removing and re-adding the collaborator. To change the permissions, use the same endpoint and pass a different `permission` parameter. The response will be a `204`, with no other indication that the permission level changed.  **Rate limits**  You are limited to sending 50 invitations to a repository per 24 hour period. Note there is no limit if you are inviting organization members to an organization repository.
     * @summary Add a repository collaborator
     * @param {string} owner The account owner of the repository. The name is not case sensitive.
     * @param {string} repo The name of the repository. The name is not case sensitive.
     * @param {string} username The handle for the GitHub user account.
     * @param {AddCollaboratorRequest} [addCollaboratorRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async addCollaborator(
      owner: string,
      repo: string,
      username: string,
      addCollaboratorRequest?: AddCollaboratorRequest,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<RepositoryInvitation>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.addCollaborator(
        owner,
        repo,
        username,
        addCollaboratorRequest,
        options,
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     * When authenticating as a user with admin rights to a repository, this endpoint will list all currently open repository invitations.
     * @summary List repository invitations
     * @param {string} owner The account owner of the repository. The name is not case sensitive.
     * @param {string} repo The name of the repository. The name is not case sensitive.
     * @param {number} [perPage] The number of results per page (max 100).
     * @param {number} [page] Page number of the results to fetch.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getInvitations(
      owner: string,
      repo: string,
      perPage?: number,
      page?: number,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<RepositoryInvitation>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getInvitations(
        owner,
        repo,
        perPage,
        page,
        options,
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     * Lists all public repositories in the order that they were created.  Note: - For GitHub Enterprise Server, this endpoint will only list repositories available to all users on the enterprise. - Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header) to get the URL for the next page of repositories.
     * @summary List public repositories
     * @param {number} [since] A repository ID. Only return repositories with an ID greater than this ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getPublicRepos(
      since?: number,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<MinimalRepository>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getPublicRepos(
        since,
        options,
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     * Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub\'s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     * @summary List pull requests
     * @param {string} owner The account owner of the repository. The name is not case sensitive.
     * @param {string} repo The name of the repository. The name is not case sensitive.
     * @param {'open' | 'closed' | 'all'} [state] Either &#x60;open&#x60;, &#x60;closed&#x60;, or &#x60;all&#x60; to filter by state.
     * @param {string} [head] Filter pulls by head user or head organization and branch name in the format of &#x60;user:ref-name&#x60; or &#x60;organization:ref-name&#x60;. For example: &#x60;github:new-script-format&#x60; or &#x60;octocat:test-branch&#x60;.
     * @param {string} [base] Filter pulls by base branch name. Example: &#x60;gh-pages&#x60;.
     * @param {'created' | 'updated' | 'popularity' | 'long-running'} [sort] What to sort results by. &#x60;popularity&#x60; will sort by the number of comments. &#x60;long-running&#x60; will sort by date created and will limit the results to pull requests that have been open for more than a month and have had activity within the past month.
     * @param {'asc' | 'desc'} [direction] The direction of the sort. Default: &#x60;desc&#x60; when sort is &#x60;created&#x60; or sort is not specified, otherwise &#x60;asc&#x60;.
     * @param {number} [perPage] The number of results per page (max 100).
     * @param {number} [page] Page number of the results to fetch.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getPulls(
      owner: string,
      repo: string,
      state?: 'open' | 'closed' | 'all',
      head?: string,
      base?: string,
      sort?: 'created' | 'updated' | 'popularity' | 'long-running',
      direction?: 'asc' | 'desc',
      perPage?: number,
      page?: number,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<PullRequestSimple>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getPulls(
        owner,
        repo,
        state,
        head,
        base,
        sort,
        direction,
        perPage,
        page,
        options,
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     * This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \"[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\" and \"[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\" for details.
     * @summary Request reviewers for a pull request
     * @param {string} owner The account owner of the repository. The name is not case sensitive.
     * @param {string} repo The name of the repository. The name is not case sensitive.
     * @param {number} pullNumber The number that identifies the pull request.
     * @param {ReviewRequestRequest} [reviewRequestRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async reviewRequest(
      owner: string,
      repo: string,
      pullNumber: number,
      reviewRequestRequest?: ReviewRequestRequest,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<PullRequestSimple>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.reviewRequest(
        owner,
        repo,
        pullNumber,
        reviewRequestRequest,
        options,
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
  }
}

/**
 * GitHubApi - factory interface
 * @export
 */
export const GitHubApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = GitHubApiFp(configuration)
  return {
    /**
     *
     * @summary Accept a repository invitation
     * @param {number} invitationId The unique identifier of the invitation.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    acceptInvitation(invitationId: number, options?: any): AxiosPromise<void> {
      return localVarFp
        .acceptInvitation(invitationId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \"[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\" and \"[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\" for details.  Adding an outside collaborator may be restricted by enterprise administrators. For more information, see \"[Enforcing repository management policies in your enterprise](https://docs.github.com/enterprise-cloud@latest/admin/policies/enforcing-policies-for-your-enterprise/enforcing-repository-management-policies-in-your-enterprise#enforcing-a-policy-for-inviting-outside-collaborators-to-repositories).\"  For more information on permission levels, see \"[Repository permission levels for an organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization#permission-levels-for-repositories-owned-by-an-organization)\". There are restrictions on which permissions can be granted to organization members when an organization base role is in place. In this case, the permission being given must be equal to or higher than the org base permission. Otherwise, the request will fail with:  ``` Cannot assign {member} permission of {role name} ```  Note that, if you choose not to pass any parameters, you\'ll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs).\"  The invitee will receive a notification that they have been invited to the repository, which they must accept or decline. They may do this via the notifications page, the email they receive, or by using the [repository invitations API endpoints](https://docs.github.com/rest/reference/repos#invitations).  **Updating an existing collaborator\'s permission level**  The endpoint can also be used to change the permissions of an existing collaborator without first removing and re-adding the collaborator. To change the permissions, use the same endpoint and pass a different `permission` parameter. The response will be a `204`, with no other indication that the permission level changed.  **Rate limits**  You are limited to sending 50 invitations to a repository per 24 hour period. Note there is no limit if you are inviting organization members to an organization repository.
     * @summary Add a repository collaborator
     * @param {string} owner The account owner of the repository. The name is not case sensitive.
     * @param {string} repo The name of the repository. The name is not case sensitive.
     * @param {string} username The handle for the GitHub user account.
     * @param {AddCollaboratorRequest} [addCollaboratorRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addCollaborator(
      owner: string,
      repo: string,
      username: string,
      addCollaboratorRequest?: AddCollaboratorRequest,
      options?: any,
    ): AxiosPromise<RepositoryInvitation> {
      return localVarFp
        .addCollaborator(owner, repo, username, addCollaboratorRequest, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * When authenticating as a user with admin rights to a repository, this endpoint will list all currently open repository invitations.
     * @summary List repository invitations
     * @param {string} owner The account owner of the repository. The name is not case sensitive.
     * @param {string} repo The name of the repository. The name is not case sensitive.
     * @param {number} [perPage] The number of results per page (max 100).
     * @param {number} [page] Page number of the results to fetch.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInvitations(
      owner: string,
      repo: string,
      perPage?: number,
      page?: number,
      options?: any,
    ): AxiosPromise<Array<RepositoryInvitation>> {
      return localVarFp
        .getInvitations(owner, repo, perPage, page, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Lists all public repositories in the order that they were created.  Note: - For GitHub Enterprise Server, this endpoint will only list repositories available to all users on the enterprise. - Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header) to get the URL for the next page of repositories.
     * @summary List public repositories
     * @param {number} [since] A repository ID. Only return repositories with an ID greater than this ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPublicRepos(
      since?: number,
      options?: any,
    ): AxiosPromise<Array<MinimalRepository>> {
      return localVarFp
        .getPublicRepos(since, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub\'s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     * @summary List pull requests
     * @param {string} owner The account owner of the repository. The name is not case sensitive.
     * @param {string} repo The name of the repository. The name is not case sensitive.
     * @param {'open' | 'closed' | 'all'} [state] Either &#x60;open&#x60;, &#x60;closed&#x60;, or &#x60;all&#x60; to filter by state.
     * @param {string} [head] Filter pulls by head user or head organization and branch name in the format of &#x60;user:ref-name&#x60; or &#x60;organization:ref-name&#x60;. For example: &#x60;github:new-script-format&#x60; or &#x60;octocat:test-branch&#x60;.
     * @param {string} [base] Filter pulls by base branch name. Example: &#x60;gh-pages&#x60;.
     * @param {'created' | 'updated' | 'popularity' | 'long-running'} [sort] What to sort results by. &#x60;popularity&#x60; will sort by the number of comments. &#x60;long-running&#x60; will sort by date created and will limit the results to pull requests that have been open for more than a month and have had activity within the past month.
     * @param {'asc' | 'desc'} [direction] The direction of the sort. Default: &#x60;desc&#x60; when sort is &#x60;created&#x60; or sort is not specified, otherwise &#x60;asc&#x60;.
     * @param {number} [perPage] The number of results per page (max 100).
     * @param {number} [page] Page number of the results to fetch.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPulls(
      owner: string,
      repo: string,
      state?: 'open' | 'closed' | 'all',
      head?: string,
      base?: string,
      sort?: 'created' | 'updated' | 'popularity' | 'long-running',
      direction?: 'asc' | 'desc',
      perPage?: number,
      page?: number,
      options?: any,
    ): AxiosPromise<Array<PullRequestSimple>> {
      return localVarFp
        .getPulls(
          owner,
          repo,
          state,
          head,
          base,
          sort,
          direction,
          perPage,
          page,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     * This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \"[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\" and \"[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\" for details.
     * @summary Request reviewers for a pull request
     * @param {string} owner The account owner of the repository. The name is not case sensitive.
     * @param {string} repo The name of the repository. The name is not case sensitive.
     * @param {number} pullNumber The number that identifies the pull request.
     * @param {ReviewRequestRequest} [reviewRequestRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reviewRequest(
      owner: string,
      repo: string,
      pullNumber: number,
      reviewRequestRequest?: ReviewRequestRequest,
      options?: any,
    ): AxiosPromise<PullRequestSimple> {
      return localVarFp
        .reviewRequest(owner, repo, pullNumber, reviewRequestRequest, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * GitHubApi - object-oriented interface
 * @export
 * @class GitHubApi
 * @extends {BaseAPI}
 */
export class GitHubApi extends BaseAPI {
  /**
   *
   * @summary Accept a repository invitation
   * @param {number} invitationId The unique identifier of the invitation.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GitHubApi
   */
  public acceptInvitation(invitationId: number, options?: AxiosRequestConfig) {
    return GitHubApiFp(this.configuration)
      .acceptInvitation(invitationId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \"[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\" and \"[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\" for details.  Adding an outside collaborator may be restricted by enterprise administrators. For more information, see \"[Enforcing repository management policies in your enterprise](https://docs.github.com/enterprise-cloud@latest/admin/policies/enforcing-policies-for-your-enterprise/enforcing-repository-management-policies-in-your-enterprise#enforcing-a-policy-for-inviting-outside-collaborators-to-repositories).\"  For more information on permission levels, see \"[Repository permission levels for an organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization#permission-levels-for-repositories-owned-by-an-organization)\". There are restrictions on which permissions can be granted to organization members when an organization base role is in place. In this case, the permission being given must be equal to or higher than the org base permission. Otherwise, the request will fail with:  ``` Cannot assign {member} permission of {role name} ```  Note that, if you choose not to pass any parameters, you\'ll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs).\"  The invitee will receive a notification that they have been invited to the repository, which they must accept or decline. They may do this via the notifications page, the email they receive, or by using the [repository invitations API endpoints](https://docs.github.com/rest/reference/repos#invitations).  **Updating an existing collaborator\'s permission level**  The endpoint can also be used to change the permissions of an existing collaborator without first removing and re-adding the collaborator. To change the permissions, use the same endpoint and pass a different `permission` parameter. The response will be a `204`, with no other indication that the permission level changed.  **Rate limits**  You are limited to sending 50 invitations to a repository per 24 hour period. Note there is no limit if you are inviting organization members to an organization repository.
   * @summary Add a repository collaborator
   * @param {string} owner The account owner of the repository. The name is not case sensitive.
   * @param {string} repo The name of the repository. The name is not case sensitive.
   * @param {string} username The handle for the GitHub user account.
   * @param {AddCollaboratorRequest} [addCollaboratorRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GitHubApi
   */
  public addCollaborator(
    owner: string,
    repo: string,
    username: string,
    addCollaboratorRequest?: AddCollaboratorRequest,
    options?: AxiosRequestConfig,
  ) {
    return GitHubApiFp(this.configuration)
      .addCollaborator(owner, repo, username, addCollaboratorRequest, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * When authenticating as a user with admin rights to a repository, this endpoint will list all currently open repository invitations.
   * @summary List repository invitations
   * @param {string} owner The account owner of the repository. The name is not case sensitive.
   * @param {string} repo The name of the repository. The name is not case sensitive.
   * @param {number} [perPage] The number of results per page (max 100).
   * @param {number} [page] Page number of the results to fetch.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GitHubApi
   */
  public getInvitations(
    owner: string,
    repo: string,
    perPage?: number,
    page?: number,
    options?: AxiosRequestConfig,
  ) {
    return GitHubApiFp(this.configuration)
      .getInvitations(owner, repo, perPage, page, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Lists all public repositories in the order that they were created.  Note: - For GitHub Enterprise Server, this endpoint will only list repositories available to all users on the enterprise. - Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header) to get the URL for the next page of repositories.
   * @summary List public repositories
   * @param {number} [since] A repository ID. Only return repositories with an ID greater than this ID.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GitHubApi
   */
  public getPublicRepos(since?: number, options?: AxiosRequestConfig) {
    return GitHubApiFp(this.configuration)
      .getPublicRepos(since, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub\'s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   * @summary List pull requests
   * @param {string} owner The account owner of the repository. The name is not case sensitive.
   * @param {string} repo The name of the repository. The name is not case sensitive.
   * @param {'open' | 'closed' | 'all'} [state] Either &#x60;open&#x60;, &#x60;closed&#x60;, or &#x60;all&#x60; to filter by state.
   * @param {string} [head] Filter pulls by head user or head organization and branch name in the format of &#x60;user:ref-name&#x60; or &#x60;organization:ref-name&#x60;. For example: &#x60;github:new-script-format&#x60; or &#x60;octocat:test-branch&#x60;.
   * @param {string} [base] Filter pulls by base branch name. Example: &#x60;gh-pages&#x60;.
   * @param {'created' | 'updated' | 'popularity' | 'long-running'} [sort] What to sort results by. &#x60;popularity&#x60; will sort by the number of comments. &#x60;long-running&#x60; will sort by date created and will limit the results to pull requests that have been open for more than a month and have had activity within the past month.
   * @param {'asc' | 'desc'} [direction] The direction of the sort. Default: &#x60;desc&#x60; when sort is &#x60;created&#x60; or sort is not specified, otherwise &#x60;asc&#x60;.
   * @param {number} [perPage] The number of results per page (max 100).
   * @param {number} [page] Page number of the results to fetch.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GitHubApi
   */
  public getPulls(
    owner: string,
    repo: string,
    state?: 'open' | 'closed' | 'all',
    head?: string,
    base?: string,
    sort?: 'created' | 'updated' | 'popularity' | 'long-running',
    direction?: 'asc' | 'desc',
    perPage?: number,
    page?: number,
    options?: AxiosRequestConfig,
  ) {
    return GitHubApiFp(this.configuration)
      .getPulls(
        owner,
        repo,
        state,
        head,
        base,
        sort,
        direction,
        perPage,
        page,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \"[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\" and \"[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\" for details.
   * @summary Request reviewers for a pull request
   * @param {string} owner The account owner of the repository. The name is not case sensitive.
   * @param {string} repo The name of the repository. The name is not case sensitive.
   * @param {number} pullNumber The number that identifies the pull request.
   * @param {ReviewRequestRequest} [reviewRequestRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GitHubApi
   */
  public reviewRequest(
    owner: string,
    repo: string,
    pullNumber: number,
    reviewRequestRequest?: ReviewRequestRequest,
    options?: AxiosRequestConfig,
  ) {
    return GitHubApiFp(this.configuration)
      .reviewRequest(owner, repo, pullNumber, reviewRequestRequest, options)
      .then((request) => request(this.axios, this.basePath))
  }
}

/**
 * NotificationApi - axios parameter creator
 * @export
 */
export const NotificationApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @summary Create notification
     * @param {CreateNotification} [createNotification]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createNotification: async (
      createNotification?: CreateNotification,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/notifications`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        createNotification,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Get notifications
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getNotifications: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/notifications`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Update notification
     * @param {string} notificationId
     * @param {UpdateNotification} [updateNotification]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateNotification: async (
      notificationId: string,
      updateNotification?: UpdateNotification,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'notificationId' is not null or undefined
      assertParamExists('updateNotification', 'notificationId', notificationId)
      const localVarPath = `/api/v1/notifications/{notification_id}`.replace(
        `{${'notification_id'}}`,
        encodeURIComponent(String(notificationId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'PATCH',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateNotification,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * NotificationApi - functional programming interface
 * @export
 */
export const NotificationApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    NotificationApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary Create notification
     * @param {CreateNotification} [createNotification]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createNotification(
      createNotification?: CreateNotification,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.createNotification(
          createNotification,
          options,
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     *
     * @summary Get notifications
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getNotifications(
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<Notification>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getNotifications(options)
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     *
     * @summary Update notification
     * @param {string} notificationId
     * @param {UpdateNotification} [updateNotification]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateNotification(
      notificationId: string,
      updateNotification?: UpdateNotification,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.updateNotification(
          notificationId,
          updateNotification,
          options,
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
  }
}

/**
 * NotificationApi - factory interface
 * @export
 */
export const NotificationApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = NotificationApiFp(configuration)
  return {
    /**
     *
     * @summary Create notification
     * @param {CreateNotification} [createNotification]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createNotification(
      createNotification?: CreateNotification,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .createNotification(createNotification, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Get notifications
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getNotifications(options?: any): AxiosPromise<Array<Notification>> {
      return localVarFp
        .getNotifications(options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Update notification
     * @param {string} notificationId
     * @param {UpdateNotification} [updateNotification]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateNotification(
      notificationId: string,
      updateNotification?: UpdateNotification,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .updateNotification(notificationId, updateNotification, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * NotificationApi - object-oriented interface
 * @export
 * @class NotificationApi
 * @extends {BaseAPI}
 */
export class NotificationApi extends BaseAPI {
  /**
   *
   * @summary Create notification
   * @param {CreateNotification} [createNotification]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof NotificationApi
   */
  public createNotification(
    createNotification?: CreateNotification,
    options?: AxiosRequestConfig,
  ) {
    return NotificationApiFp(this.configuration)
      .createNotification(createNotification, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Get notifications
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof NotificationApi
   */
  public getNotifications(options?: AxiosRequestConfig) {
    return NotificationApiFp(this.configuration)
      .getNotifications(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Update notification
   * @param {string} notificationId
   * @param {UpdateNotification} [updateNotification]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof NotificationApi
   */
  public updateNotification(
    notificationId: string,
    updateNotification?: UpdateNotification,
    options?: AxiosRequestConfig,
  ) {
    return NotificationApiFp(this.configuration)
      .updateNotification(notificationId, updateNotification, options)
      .then((request) => request(this.axios, this.basePath))
  }
}

/**
 * PostApi - axios parameter creator
 * @export
 */
export const PostApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @summary Create post
     * @param {CreatePost} [createPost]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPost: async (
      createPost?: CreatePost,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/posts`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        createPost,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Delete post
     * @param {string} postId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePost: async (
      postId: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'postId' is not null or undefined
      assertParamExists('deletePost', 'postId', postId)
      const localVarPath = `/api/v1/posts/{post_id}`.replace(
        `{${'post_id'}}`,
        encodeURIComponent(String(postId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Get posts
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPosts: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/posts`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Update post
     * @param {string} postId
     * @param {UpdatePost} [updatePost]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePost: async (
      postId: string,
      updatePost?: UpdatePost,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'postId' is not null or undefined
      assertParamExists('updatePost', 'postId', postId)
      const localVarPath = `/api/v1/posts/{post_id}`.replace(
        `{${'post_id'}}`,
        encodeURIComponent(String(postId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'PATCH',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        updatePost,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * PostApi - functional programming interface
 * @export
 */
export const PostApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = PostApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary Create post
     * @param {CreatePost} [createPost]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createPost(
      createPost?: CreatePost,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createPost(
        createPost,
        options,
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     *
     * @summary Delete post
     * @param {string} postId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deletePost(
      postId: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deletePost(
        postId,
        options,
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     *
     * @summary Get posts
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getPosts(
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Post>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getPosts(
        options,
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     *
     * @summary Update post
     * @param {string} postId
     * @param {UpdatePost} [updatePost]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updatePost(
      postId: string,
      updatePost?: UpdatePost,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updatePost(
        postId,
        updatePost,
        options,
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
  }
}

/**
 * PostApi - factory interface
 * @export
 */
export const PostApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = PostApiFp(configuration)
  return {
    /**
     *
     * @summary Create post
     * @param {CreatePost} [createPost]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPost(createPost?: CreatePost, options?: any): AxiosPromise<void> {
      return localVarFp
        .createPost(createPost, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Delete post
     * @param {string} postId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePost(postId: string, options?: any): AxiosPromise<void> {
      return localVarFp
        .deletePost(postId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Get posts
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPosts(options?: any): AxiosPromise<Array<Post>> {
      return localVarFp
        .getPosts(options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Update post
     * @param {string} postId
     * @param {UpdatePost} [updatePost]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePost(
      postId: string,
      updatePost?: UpdatePost,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .updatePost(postId, updatePost, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * PostApi - object-oriented interface
 * @export
 * @class PostApi
 * @extends {BaseAPI}
 */
export class PostApi extends BaseAPI {
  /**
   *
   * @summary Create post
   * @param {CreatePost} [createPost]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PostApi
   */
  public createPost(createPost?: CreatePost, options?: AxiosRequestConfig) {
    return PostApiFp(this.configuration)
      .createPost(createPost, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Delete post
   * @param {string} postId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PostApi
   */
  public deletePost(postId: string, options?: AxiosRequestConfig) {
    return PostApiFp(this.configuration)
      .deletePost(postId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Get posts
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PostApi
   */
  public getPosts(options?: AxiosRequestConfig) {
    return PostApiFp(this.configuration)
      .getPosts(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Update post
   * @param {string} postId
   * @param {UpdatePost} [updatePost]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PostApi
   */
  public updatePost(
    postId: string,
    updatePost?: UpdatePost,
    options?: AxiosRequestConfig,
  ) {
    return PostApiFp(this.configuration)
      .updatePost(postId, updatePost, options)
      .then((request) => request(this.axios, this.basePath))
  }
}

/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @summary Get user
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUser: async (
      userId: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'userId' is not null or undefined
      assertParamExists('getUser', 'userId', userId)
      const localVarPath = `/api/v1/users/{user_id}`.replace(
        `{${'user_id'}}`,
        encodeURIComponent(String(userId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Login user
     * @param {LoginUser} [loginUser]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    loginUser: async (
      loginUser?: LoginUser,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/users`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        loginUser,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Logout user
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logoutUser: async (
      userId: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'userId' is not null or undefined
      assertParamExists('logoutUser', 'userId', userId)
      const localVarPath = `/api/v1/users/{user_id}`.replace(
        `{${'user_id'}}`,
        encodeURIComponent(String(userId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary Get user
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getUser(
      userId: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getUser(
        userId,
        options,
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     *
     * @summary Login user
     * @param {LoginUser} [loginUser]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async loginUser(
      loginUser?: LoginUser,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.loginUser(
        loginUser,
        options,
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     *
     * @summary Logout user
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async logoutUser(
      userId: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.logoutUser(
        userId,
        options,
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
  }
}

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = UserApiFp(configuration)
  return {
    /**
     *
     * @summary Get user
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUser(userId: string, options?: any): AxiosPromise<User> {
      return localVarFp
        .getUser(userId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Login user
     * @param {LoginUser} [loginUser]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    loginUser(loginUser?: LoginUser, options?: any): AxiosPromise<void> {
      return localVarFp
        .loginUser(loginUser, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Logout user
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logoutUser(userId: string, options?: any): AxiosPromise<void> {
      return localVarFp
        .logoutUser(userId, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
  /**
   *
   * @summary Get user
   * @param {string} userId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public getUser(userId: string, options?: AxiosRequestConfig) {
    return UserApiFp(this.configuration)
      .getUser(userId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Login user
   * @param {LoginUser} [loginUser]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public loginUser(loginUser?: LoginUser, options?: AxiosRequestConfig) {
    return UserApiFp(this.configuration)
      .loginUser(loginUser, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Logout user
   * @param {string} userId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public logoutUser(userId: string, options?: AxiosRequestConfig) {
    return UserApiFp(this.configuration)
      .logoutUser(userId, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
